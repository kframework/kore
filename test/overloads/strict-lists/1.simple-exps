[1, 1 + 1, 2 + 1, 4]
/*
Suppose one wants to check whether the list `1, 1 + 1` is a `KResult`.

Its representation in KORE is of the form
`\inj{Exps, KItem}(ExpsCons(\inj{Val, Exp}(1), ExpsCons(1 + 1, \inj{Vals, Exps}(.Vals))))`

In order to apply the `owise` rule for `KResult`, one must compute 

`\not(\ceil(\inj{Exps, KItem}(ExpsCons(\inj{Val, Exp}(1), ExpsCons(1 + 1, \inj{Vals, Exps}(.Vals)))) ∧ \inj{KResult, KItem}(R:KResult)))`

At this moment, the narrowing kicks in (`unifyOverloadingVsOverloadedVariable`), and it could narrow `R:KResult` to `inj{Vals, KResult}(ValsCons(V:Val, Vs:Vals))`, then reattempt unification between `inj{Exps, KItem}(ExpsCons(inj{Val, Exp}(1), ExpsCons(1 + 1, inj{Vals, Exps}(.Vals))))` and  `inj{Vals, KItem}(ValsCons(V:Val, Vs:Vals))`, where the latter can be transformed to `inj{Exps, KItem}(ExpCons(inj{Val,Exp}(V:Val), inj{Vals, Exps}(Vs:Vals)))`, which reduces to `V =  1` and with `ExpsCons(1 + 1, inj{Vals, Exps}(.Vals))` unified to ` inj{Vals, Exps}(Vs:Vals)`

Applying again narrowing (this time `unifyOverloadingInjVsVariable`) we narrow `Vs:Vals` to `ValsCons(V':Val, Vs':Vals)` and use overloading to attempt unification  between `ExpsCons(1 + 1, inj{Vals, Exps}(.Vals))` and `inj{Vals, Exps}(ValsCons(V':Val, Vs':Vals))`, which gets to `1 + 1` being unified with `\inj{Val, Exp}(V':Val)`, which fails, returning `\bottom`.

Thus, `\not(\ceil(\inj{Exps, KItem}(ExpsCons(\inj{Val, Exp}(1), ExpsCons(1 + 1, \inj{Vals, Exps}(.Vals)))) ∧ \inj{KResult, KItem}(R:KResult)))` simplifies
to `\not(\ceil(\bottom))`, which is `\top`, thus making `isKresult` evaluate to `false`.
*/