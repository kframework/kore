[]

module IMP

  sort Bool{} []

  symbol true{}() : Bool{} []

  symbol false{}() : Bool{} []

  symbol and{}(Bool{}, Bool{}) : Bool{} []

  symbol not{}(Bool{}) : Bool{} []

  sort Int{} []

  symbol zero{}() : Int{} []

  symbol succ{}(Int{}) : Int{} []

  symbol plus{}(Int{}, Int{}) : Int{} []

  symbol one{}() : Int{} []

  symbol two{}() : Int{} []

  symbol three{}() : Int{} []

  symbol div{}(Int{}, Int{}) : Int{} []

  symbol leq{}(Int{}, Int{}) : Bool{} []

  symbol neq{}(Int{}, Int{}) : Bool{} []

  sort Id{} []

  symbol id{}(Int{}) : Id{} []

  sort List{S} []

  symbol nil{S}() : List{S} []

  symbol cons{S}(S, List{S}) : List{S} []

  symbol append{S}(List{S}, List{S}) : List{S} []

  symbol listItem{S}(S) : List{S} []

  sort Set{S} []

  symbol emptySet{S}() : Set{S} []

  symbol union{S}(Set{S}, Set{S}) : Set{S} []

  symbol inSet{S}(S, Set{S}) : Bool{} []

  axiom{S,R}
    \equals{Set{S},R}(
      union{S}(S:Set{S}, emptySet{S}()),
      S:Set{S}) []

  sort Map{S1,S2} []

  symbol bind{S1,S2}(S1,S2) : Map{S1,S2} []

  symbol emp{S1,S2}() : Map{S1,S2} []

  symbol merge{S1,S2}(Map{S1,S2}, Map{S1,S2}) : Map{S1,S2} []

  symbol keys{S1,S2}(Map{S1,S2}) : Set{S1} []

  sort Ctxt{S1,S2} []

  symbol gamma0{S1,S2}(S1,S2) : Ctxt{S1,S2} []

  symbol app{S1,S2}(Ctxt{S1,S2}, S1) : S2 []

  alias gamma{S1,S2}(S1,S2) : Ctxt{S1,S2} [] // we could make it a symbol

  alias idctxt{S}() : Ctxt{S,S} []

  axiom{S,R}
    \equals{Ctxt{S,S},R}(
      idctxt{S}(),
      gamma{S,S}(X:S,X:S)) []

  axiom{S,R}
    \equals{S,R}(
      T:S,
      app{S,S}(idctxt{S}(), T:S)) []


  // Start with IMP Specific Definitions

  sort AExp{} []

  symbol intAsAExp{}(Int{}) : AExp{} []

  symbol idAsAExp{}(Id{}) : AExp{} []

  symbol plusAExp{}(AExp{}, AExp{}) : AExp{}
  [ strict{}(\dv{Strict{}}("plusAExp"), firstArgument{}())
  , strict{}(\dv{Strict{}}("plusAExp"), secondArgument{}())
  ]

  symbol divAExp{}(AExp{}, AExp{}) : AExp{}
  [ strict{}(\dv{Strict{}}("divAExp"), firstArgument{}())
  , strict{}(\dv{Strict{}}("divAExp"), secondArgument{}())
  ]

  axiom{R}
    \equals{AExp{},R}(
      divAExp{}(X:AExp{}, Y:AExp{}),
      app{AExp{},AExp{}}(
        gamma{AExp{},AExp{}}(
          HOLE:AExp{},
          divAExp{}(HOLE:AExp{}, Y:AExp{})),
        X:AExp{}))
  [strict{}(\dv{Strict{}}("divAExp"), firstArgument{}())]

  axiom{R}
    \equals{AExp{},R}(
      divAExp{}(X:AExp{}, Y:AExp{}),
      app{AExp{},AExp{}}(
        gamma{AExp{},AExp{}}(
          HOLE:AExp{},
          divAExp{}(X:AExp{}, HOLE:AExp{})),
        Y:AExp{}))
  [strict{}(\dv{Strict{}}("divAExp"), secondArgument{}())]

  sort BExp{} []

  sort Block{} []

  symbol emptyBlock{}() : Block{} []

  symbol block{}(Stmt{}) : Block{} []

  sort Stmt{} []

  symbol blockAsStmt{}(Block{}) : Stmt{} []

  symbol asgn{}(Id{}, AExp{}) : Stmt{}
    [strict{}(\dv{Strict{}}("asgn"), secondArgument{}())]

  axiom{R}
    \equals{Stmt{},R}(
      asgn{}(X:Id{}, E:AExp{}),
      app{AExp{},Stmt{}}(
        gamma{AExp{},Stmt{}}(
          HOLE:AExp{},
          asgn{}(X:Id{}, HOLE:AExp{})),
        E:AExp{}))
  [strict{}(\dv{Strict{}}("asgn"), secondArgument{}())]


  symbol if{}(BExp{}, Block{}, Block{}) : Stmt{}
    [strict{}(\dv{Strict{}}("if"), firstArgument{}())]

  axiom{S,R,#R}
    \implies{#R}(
      \not{#R}(
        #occursFree{#R}(
          #variable{}("HOLE", #S:#Sort{}),
          if{}(
            app{S,BExp{}}(
              #C:#Pattern{},
              T:S),
            B1:Block{},
            B2:Block{}))),
      #provable{#R}(
        \equals{Stmt{},R}(
          if{}(
            app{S,BExp{}}(
              #C:#Pattern{},
              T:S),
            B1:Block{},
            B2:Block{}),
          app{S,Stmt{}}(
            gamma{S,Stmt{}}(
              HOLE:S,
              if{}(
                app{S,BExp{}}(
                  #C:#Pattern{},
                  HOLE:S),
                B1:Block{},
                B2:Block{})),
            T:S))))
    [strict{}(\dv{Strict{}}("if"), firstArgument{}())]


  symbol while{}(BExp{}, Block{}) : Stmt{} []

  symbol seq{}(Stmt{}, Stmt{}) : Stmt{}
    [strict{}(\dv{Strict{}}("seq"), firstArgument{}())]

   axiom{S,R,#R}
    \implies{#R}(
      \not{#R}(
        #occursFree{#R}(
          #variable{}("HOLE", #S:#Sort{}),
          seq{}(
            app{S,Stmt{}}(
              #C:#Pattern{},
              T:S),
            P:Stmt{}))),
      #provable{#R}(
        \equals{Stmt{},R}(
          seq{}(
            app{S,Stmt{}}(
              #C:#Pattern{},
              T:S),
            P:Stmt{}),
          app{S,Stmt{}}(
            gamma{S,Stmt{}}(
              HOLE:S,
              seq{}(
                app{S,Stmt{}}(
                  #C:#Pattern{},
                  HOLE:S),
                P:Stmt{})),
            T:S)))) [strict{}(\dv{Strict{}}("seq"), firstArgument{}())]


  sort Pgm{} []

  symbol pgm{}(List{Id{}}, Stmt{}) : Pgm{}
    [ strict{}(\dv{Strict{}}("pgm"), firstArgument{}())
    , strict{}(\dv{Strict{}}("pgm"), secondArgument{}())
    ]

  sort KCell{} []

  symbol kcell{}(Pgm{}) : KCell{}
    [strict{}(\dv{Strict{}}("kcell"), firstArgument{}())]

  sort StateCell{} []

  symbol statecell{}(Map{Id{}, Int{}}) : StateCell{}
    [strict{}(\dv{Strict{}}("statecell"), firstArgument{}())]

  sort TopCell{} []

  symbol top{}(KCell{}, StateCell{}) : TopCell{} []

  symbol topcell{}(KCell{}, StateCell{}) : TopCell{}
    [ strict{}(\dv{Strict{}}("topcell"), firstArgument{}())
    , strict{}(\dv{Strict{}}("topcell"), secondArgument{}())
    ]

  symbol krun{}(Pgm{}) : TopCell{} []

  axiom{R}
    \equals{TopCell{},R}(
      krun{}(P:Pgm{}),
      top{}(
        kcell{}(P:Pgm{}),
        statecell{}(emp{Id{},Int{}}()))) []


  // Rewrite Rules

  // X + Y => X +Int Y

  axiom{S}
    app{AExp{},S}(
      C:Ctxt{AExp{},S},
      \rewrites{AExp{}}(
        plusAExp{}(intAsAExp{}(X:Int{}), intAsAExp{}(Y:Int{})),
        intAsAExp{}(plus{}(X:Int{}, Y:Int{}))))
  []

  // X / Y => X /Int Y requires X =/=Int Y


     


endmodule []
