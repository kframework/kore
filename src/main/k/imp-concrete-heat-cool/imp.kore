[]

module BASIC-K
  sort SortK{} []
  sort SortKItem{} []
endmodule []

module KSEQ
  import BASIC-K []

  symbol kseq{}(SortKItem{}, SortK{}) : SortK{} []
  symbol append{}(SortK{}, SortK{}) : SortK{} [function{}()]
  symbol dotk{}() : SortK{} []

  axiom{R}
    \equals{SortK{},R}(
      append{}(dotk{}(),K2:SortK{}),
      K2:SortK{})
  []

  axiom{R}
    \equals{SortK{},R}(
      append{}(kseq{}(K1:SortKItem{},K2:SortK{}),K3:SortK{}),
      kseq{}(K1:SortKItem{},append{}(K2:SortK{},K3:SortK{})))
  []

endmodule []

module INJ
  symbol inj{From,To}(From) : To []

  axiom{S1,S2,S3,R}
    \equals{S3,R}(
      inj{S2,S3}(inj{S1,S2}(T:S1)),
      inj{S1,S3}(T:S1))
  []

endmodule []

module K
  import KSEQ []
  import INJ []
endmodule []

module IMP

// imports
  import K []

  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(
      inj{SortAExp{},SortKItem{}}(inj{SortId{},SortAExp{}}(T:SortId{}))
         ,VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(
      inj{SortId{},SortKItem{}}(T:SortId{})
      ,VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  []

  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(
      inj{SortAExp{},SortKItem{}}(inj{SortInt{},SortAExp{}}(T:SortInt{}))
         ,VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(
      inj{SortInt{},SortKItem{}}(T:SortInt{})
      ,VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  []

  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(
      inj{SortStateValue{},SortKItem{}}(inj{SortInt{},SortStateValue{}}(T:SortInt{}))
         ,VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(
      inj{SortInt{},SortKItem{}}(T:SortInt{})
      ,VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  []

  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(
      inj{SortStmt{},SortKItem{}}(inj{SortBlock{},SortStmt{}}(T:SortBlock{}))
         ,VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(
      inj{SortBlock{},SortKItem{}}(T:SortBlock{})
      ,VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  []

// sorts
  sort SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)"), hook{}("LIST.List"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(197,3,197,31)")]
  sort SortTCellFragment{} []
  hooked-sort SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(480,3,480,37)"), hook{}("STRING.String")]
  sort SortStateCell{} []
  sort SortKConfigVar{} [token{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,3,12,27)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/kast.k)")]
  sort SortTCell{} []
  sort SortIds{} []
  sort SortBExp{} []
  sort SortStateCellOpt{} []
  sort SortStateKey{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(4,3,4,17)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]
  sort SortId{} [token{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(697,3,697,19)")]
  sort SortStream{} []
  sort SortCell{} []
  hooked-sort SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)"), hook{}("BOOL.Bool"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(263,3,263,31)")]
  sort SortAssignment{} []
  sort SortKCell{} []
  sort SortKResult{} []
  sort SortMap{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)"), hook{}("MAP.Map"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(87,3,87,28)")]
  sort SortKCellOpt{} []
  sort SortStmt{} []
  hooked-sort SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(320,3,320,28)"), hook{}("INT.Int")]
  hooked-sort SortFloat{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(402,3,402,34)"), hook{}("FLOAT.Float")]
  sort SortStateValue{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(5,3,5,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]
  sort SortPgm{} []
  sort SortBlock{} []
  sort SortSet{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(153,3,153,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)"), hook{}("SET.Set")]
  sort SortIOError{} []
  sort SortState{} []
  sort SortAExp{} []

// symbols
  symbol LblinitKCell{}(SortMap{}) : SortKCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortIOError{} [klabel{}("#unknownIOError"), originalPrd{}(), productionID{}("2059572982"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(760,44,760,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Stop'Set{}() : SortSet{} [klabel{}(".Set"), originalPrd{}(), latex{}("\\dotCt{Set}"), productionID{}("736920911"), functional{}(), symbol'Kywd'{}(), function{}(), constructor{}(), hook{}("SET.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(161,18,161,122)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [klabel{}("bitRangeInt"), originalPrd{}(), productionID{}("1330247343"), function{}(), hook{}("INT.bitRange"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(364,18,364,108)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'sort'LParUndsRParUnds'K-REFLECTION'UndsUnds'K{}(SortK{}) : SortString{} [klabel{}("#sort"), originalPrd{}(), productionID{}("2133655103"), function{}(), hook{}("KREFLECTION.sort"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(743,21,743,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(SortString{}) : SortId{} [klabel{}("String2Id"), originalPrd{}(), productionID{}("1396721535"), functional{}(), function{}(), hook{}("STRING.string2token"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(700,17,700,84)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EBADF'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("375466577"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(764,22,764,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lblkeys'Unds'list'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortList{} [originalPrd{}(), productionID{}("2031951755"), function{}(), hook{}("MAP.keys_list"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(132,19,132,79)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("567294307"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(795,22,795,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1371376476"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(828,22,828,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [originalPrd{}(), smtlib{}(">="), latex{}("{#1}\\mathrel{\\geq_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1148255190"), functional{}(), function{}(), hook{}("INT.ge"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(384,19,384,149)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [originalPrd{}(), left{}(), productionID{}("1197251633"), functional{}(), function{}(), hook{}("STRING.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(492,19,492,88)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'xorInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), latex{}("{#1}\\mathrel{\\oplus_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1096485705"), functional{}(), function{}(), hook{}("INT.xor"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(356,18,356,146)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(SortState{}, SortStateKey{}, SortStateValue{}) : SortState{} [klabel{}("set"), originalPrd{}(), productionID{}("1932332324"), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,62)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]
  symbol Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(SortId{}, SortInt{}) : SortKItem{} [originalPrd{}(), productionID{}("2144284609"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(42,20,42,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(SortBExp{}) : SortBExp{} [originalPrd{}(), productionID{}("554868511"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,20,12,27)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("400103862"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(779,22,779,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'parse'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortKItem{} [klabel{}("#parse"), originalPrd{}(), productionID{}("368342628"), function{}(), impure{}(), hook{}("IO.parse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(848,20,848,80)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("+"), latex{}("{#1}\\mathrel{+_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("795321555"), functional{}(), function{}(), hook{}("INT.add"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(348,18,348,152)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisKResult{}(SortK{}) : SortBool{} [function{}(), predicate{}("KResult"), originalPrd{}()]
  symbol Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("333392524"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(814,22,814,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Unds'dividesInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [originalPrd{}(), productionID{}("324169305"), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(388,19,388,52)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lblsize'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortInt{} [klabel{}("sizeMap"), originalPrd{}(), productionID{}("331122245"), functional{}(), function{}(), hook{}("MAP.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(140,18,140,103)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [originalPrd{}(), smtlib{}("distinct"), latex{}("{#1}\\mathrel{{=}{/}{=}_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1346343363"), functional{}(), function{}(), hook{}("INT.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(387,19,387,160)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EOF'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("177140066"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(760,22,760,27)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("418179060"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(797,22,797,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [originalPrd{}(), productionID{}("983595261"), functional{}(), function{}(), hook{}("STRING.countAllOccurrences"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(516,18,516,132)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblchrChar'LParUndsRParUnds'STRING'UndsUnds'Int{}(SortInt{}) : SortString{} [klabel{}("chrChar"), originalPrd{}(), productionID{}("1551629761"), function{}(), hook{}("STRING.chr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(495,21,495,69)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1893960929"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(812,22,812,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblString2Float'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortFloat{} [klabel{}("String2Float"), originalPrd{}(), productionID{}("629454893"), function{}(), hook{}("STRING.string2float"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(506,21,506,93)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblrandInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [klabel{}("randInt"), originalPrd{}(), productionID{}("391135083"), function{}(), hook{}("INT.rand"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(397,18,397,56)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [originalPrd{}(), productionID{}("530486389"), functional{}(), function{}(), hook{}("STRING.replaceFirst"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(515,21,515,124)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [originalPrd{}(), smtlib{}("<="), latex{}("{#1}\\mathrel{\\leq_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("343812839"), functional{}(), function{}(), hook{}("INT.le"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(382,19,382,149)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(SortIds{}, SortStmt{}) : SortPgm{} [originalPrd{}(), productionID{}("1499840045"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(23,18,23,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'UndsEqlsEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [klabel{}("_==K_"), originalPrd{}(), smtlib{}("="), equalEqualK{}(), latex{}("{#1}\\mathrel{=_K}{#2}"), productionID{}("1093864783"), functional{}(), symbol'Kywd'{}(), function{}(), hook{}("KEQUAL.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(723,21,723,156)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbllog2Int'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [klabel{}("log2Int"), originalPrd{}(), productionID{}("566113173"), function{}(), hook{}("INT.log2"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(362,18,362,74)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EACCES'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("36657658"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(762,22,762,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblListItem{}(SortK{}) : SortList{} [klabel{}("ListItem"), originalPrd{}(), smtlib{}("smt_seq_elem"), productionID{}("1242027525"), functional{}(), symbol'Kywd'{}(), function{}(), hook{}("LIST.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(235,19,235,132)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisStateCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("StateCellOpt"), originalPrd{}()]
  symbol Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("777457133"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(805,22,805,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("2029680286"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(763,22,763,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [originalPrd{}(), productionID{}("1188401255"), functional{}(), function{}(), hook{}("STRING.lt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(522,19,522,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisStateValue{}(SortK{}) : SortBool{} [function{}(), predicate{}("StateValue"), originalPrd{}()]
  symbol Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("749282235"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(813,22,813,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblordChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [klabel{}("ordChar"), originalPrd{}(), productionID{}("1383519982"), function{}(), hook{}("STRING.ord"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(496,18,496,69)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisKCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("KCellOpt"), originalPrd{}()]
  symbol Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("372469954"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(819,22,819,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1399701152"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(792,22,792,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1926673338"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(816,22,816,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("527829831"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(796,22,796,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(SortId{}, SortAExp{}) : SortStmt{} [originalPrd{}(), productionID{}("630028734"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,20,18,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'Hash'configuration'Unds'K-REFLECTION'Unds'{}() : SortK{} [originalPrd{}(), productionID{}("672746064"), function{}(), impure{}(), hook{}("KREFLECTION.configuration"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(742,16,742,83)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'argv'LParRParUnds'K-REFLECTION'Unds'{}() : SortList{} [klabel{}("#argv"), originalPrd{}(), productionID{}("1807015220"), function{}(), hook{}("KREFLECTION.argv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(752,19,752,60)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(SortBool{}, SortBlock{}, SortBlock{}) : SortKItem{} [originalPrd{}(), productionID{}("2099802038"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(34,20,35,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("122155649"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(808,22,808,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisBool{}(SortK{}) : SortBool{} [function{}(), predicate{}("Bool"), originalPrd{}()]
  hooked-symbol Lbl'Hash'seek'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [originalPrd{}(), productionID{}("1164799006"), function{}(), impure{}(), hook{}("IO.seek"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(837,16,837,76)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(SortMap{}, SortK{}) : SortMap{} [klabel{}("_[_<-undef]"), originalPrd{}(), productionID{}("884603232"), functional{}(), symbol'Kywd'{}(), function{}(), hook{}("MAP.remove"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(116,18,116,117)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsAnd'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), latex{}("{#1}\\mathrel{\\&_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1541525668"), functional{}(), function{}(), hook{}("INT.and"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(354,18,354,142)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1277933280"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(785,22,785,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortString{} [originalPrd{}(), latex{}("{#1}+_{\\scriptstyle\\it String}{#2}"), left{}(), productionID{}("1473981203"), functional{}(), function{}(), hook{}("STRING.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(490,21,490,139)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'-LT-'T'-GT-'{}(SortKCell{}, SortStateCell{}) : SortTCell{} [contentStartColumn{}("17"), contentStartLine{}("79"), originalPrd{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), cell{}(), color{}("yellow"), functional{}(), format{}("%1%i%n%2%n%3%d%n%4"), topcell{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(79,17,82,21)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'Hash'seekEnd'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [originalPrd{}(), productionID{}("504582810"), function{}(), impure{}(), hook{}("IO.seekEnd"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(838,16,838,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(SortBool{}) : SortKItem{} [originalPrd{}(), productionID{}("1090541608"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(40,20,40,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [originalPrd{}(), productionID{}("755210740"), functional{}(), function{}(), hook{}("STRING.le"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(523,19,523,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisTCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCell"), originalPrd{}()]
  hooked-symbol LblSet'Coln'in{}(SortK{}, SortSet{}) : SortBool{} [klabel{}("Set:in"), originalPrd{}(), productionID{}("2084559714"), functional{}(), symbol'Kywd'{}(), function{}(), hook{}("SET.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(175,19,175,102)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'stdout'Unds'K-IO'Unds'{}() : SortInt{} [originalPrd{}(), productionID{}("795242171"), functional{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(857,19,857,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'write'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String{}(SortInt{}, SortString{}) : SortK{} [originalPrd{}(), productionID{}("1160649162"), function{}(), impure{}(), hook{}("IO.write"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(840,16,840,81)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}() : SortIds{} [originalPrd{}(), productionID{}("67749199"), functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,18,24,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol LblsrandInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortK{} [klabel{}("srandInt"), originalPrd{}(), productionID{}("1003292107"), function{}(), hook{}("INT.srand"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(398,16,398,56)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(SortInt{}) : SortKItem{} [originalPrd{}(), productionID{}("1100399456"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(44,20,44,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("127791068"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(767,22,767,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("333040629"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(824,22,824,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'UndsUnds'Map'Unds'K'Unds'K{}(SortMap{}, SortK{}, SortK{}) : SortK{} [klabel{}("Map:lookupOrDefault"), originalPrd{}(), productionID{}("1962329560"), functional{}(), function{}(), hook{}("MAP.lookupOrDefault"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(110,16,110,126)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [originalPrd{}(), smtlib{}("or"), latex{}("{#1}\\vee_{\\scriptstyle\\it Bool}{#2}"), left{}(), productionID{}("1569754439"), functional{}(), function{}(), boolOperation{}(), hook{}("BOOL.or"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(275,19,275,156)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lblvalues'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortList{} [klabel{}("values"), originalPrd{}(), productionID{}("351417028"), function{}(), hook{}("MAP.values"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(137,19,137,76)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("901205084"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(804,22,804,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("748842359"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(810,22,810,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblgetKLabel'LParUndsRParUnds'K-REFLECTION'UndsUnds'K{}(SortK{}) : SortKItem{} [klabel{}("getKLabel"), originalPrd{}(), productionID{}("1345900725"), function{}(), hook{}("KREFLECTION.getKLabel"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(745,20,745,72)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisIds{}(SortK{}) : SortBool{} [function{}(), predicate{}("Ids"), originalPrd{}()]
  symbol Lblget'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(SortState{}, SortStateKey{}) : SortStateValue{} [klabel{}("get"), originalPrd{}(), productionID{}("1860491691"), partial{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(17,25,17,64)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]
  symbol LblisStmt{}(SortK{}) : SortBool{} [function{}(), predicate{}("Stmt"), originalPrd{}()]
  hooked-symbol Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [originalPrd{}(), smtlib{}("and"), left{}(), productionID{}("1954985045"), functional{}(), function{}(), boolOperation{}(), hook{}("BOOL.andThen"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(273,19,273,118)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'getenv'LParUndsRParUnds'K-REFLECTION'UndsUnds'String{}(SortString{}) : SortString{} [klabel{}("#getenv"), originalPrd{}(), productionID{}("718571091"), function{}(), impure{}(), hook{}("KREFLECTION.getenv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(748,21,748,80)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortKItem{} [originalPrd{}(), productionID{}("2058135834"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,20,38,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortBExp{} [originalPrd{}(), latex{}("{#1}\\leq{#2}"), productionID{}("892083096"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1275035040"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(790,22,790,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Unds'Map'Unds'{}(SortMap{}, SortMap{}) : SortMap{} [klabel{}("_Map_"), assoc{}(), originalPrd{}(), index{}("0"), left{}(), element{}("_|->_"), productionID{}("1578587450"), functional{}(), unit{}(".Map"), format{}("%1%n%2"), symbol'Kywd'{}(), function{}(), hook{}("MAP.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(95,18,95,172)"), comm{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'isConcrete'LParUndsRParUnds'K-REFLECTION'UndsUnds'K{}(SortK{}) : SortBool{} [klabel{}("#isConcrete"), originalPrd{}(), productionID{}("839998248"), function{}(), hook{}("KREFLECTION.isConcrete"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(746,19,746,73)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1020155847"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(798,22,798,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Unds'List'Unds'{}(SortList{}, SortList{}) : SortList{} [klabel{}("_List_"), assoc{}(), originalPrd{}(), smtlib{}("smt_seq_concat"), left{}(), element{}("ListItem"), productionID{}("52514534"), functional{}(), unit{}(".List"), format{}("%1%n%2"), symbol'Kywd'{}(), function{}(), hook{}("LIST.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(230,19,230,192)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(SortInt{}) : SortString{} [klabel{}("Int2String"), originalPrd{}(), productionID{}("1764996806"), functional{}(), function{}(), hook{}("STRING.int2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(508,21,508,103)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("2144838275"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(761,22,761,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [klabel{}("findChar"), originalPrd{}(), productionID{}("2142565033"), function{}(), hook{}("STRING.findChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(501,18,501,89)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("515809288"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(815,22,815,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisBExp{}(SortK{}) : SortBool{} [function{}(), predicate{}("BExp"), originalPrd{}()]
  symbol Lbl'Hash'EPERM'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1058876963"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(791,22,791,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'divInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("div"), left{}(), productionID{}("90567568"), function{}(), hook{}("INT.ediv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(345,18,345,93)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1046665075"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(786,22,786,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsXor-Perc'Int'UndsUndsUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("(mod (^ #1 #2) #3)"), left{}(), productionID{}("993370665"), function{}(), hook{}("INT.powmod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(337,18,337,110)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [klabel{}("_==Int_"), originalPrd{}(), smtlib{}("="), latex{}("{#1}\\mathrel{{=}{=}_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1889057031"), functional{}(), function{}(), hook{}("INT.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(386,19,386,167)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("mod"), latex{}("{#1}\\mathrel{\\%_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("332873513"), function{}(), hook{}("INT.tmod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(343,18,343,144)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblBase2String'LParUndsCommUndsRParUnds'STRING'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [klabel{}("Base2String"), originalPrd{}(), productionID{}("2101249621"), function{}(), hook{}("STRING.base2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(509,21,509,92)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("871790326"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(800,22,800,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1200470358"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(825,22,825,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1281025083"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(801,22,801,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [originalPrd{}(), productionID{}("1651162064"), functional{}(), function{}(), hook{}("STRING.replaceAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(513,21,513,122)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lblchoice'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortK{} [klabel{}("Map:choice"), originalPrd{}(), productionID{}("154173878"), function{}(), hook{}("MAP.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(146,16,146,96)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [originalPrd{}(), left{}(), productionID{}("220454978"), functional{}(), function{}(), hook{}("STRING.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(518,19,518,94)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lblsize'LParUndsRParUnds'SET'UndsUnds'Set{}(SortSet{}) : SortInt{} [klabel{}("size"), originalPrd{}(), productionID{}("1766911337"), functional{}(), function{}(), hook{}("SET.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(181,18,181,80)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(SortId{}, SortIds{}) : SortIds{} [originalPrd{}(), right{}(), productionID{}("67749199"), functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,18,24,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(SortInt{}) : SortAExp{} [originalPrd{}(), productionID{}("53940034"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(6,20,6,26)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'Hash'system'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [klabel{}("#system"), originalPrd{}(), productionID{}("1261198850"), function{}(), impure{}(), hook{}("IO.system"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(869,20,869,73)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [klabel{}("absInt"), originalPrd{}(), smtlib{}("int_abs"), productionID{}("2100440237"), functional{}(), function{}(), hook{}("INT.abs"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(361,18,361,102)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(SortBExp{}, SortBlock{}) : SortStmt{} [originalPrd{}(), productionID{}("1812823171"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(21,20,21,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(SortBExp{}, SortBExp{}) : SortBExp{} [originalPrd{}(), left{}(), productionID{}("1520387953"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,67)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'EDOM'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("405896924"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(768,22,768,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortKItem{} [originalPrd{}(), productionID{}("68326648"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(45,20,45,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("2112233878"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(818,22,818,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisK{}(SortK{}) : SortBool{} [function{}(), predicate{}("K"), originalPrd{}()]
  hooked-symbol Lbl'Hash'tell'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortInt{} [originalPrd{}(), productionID{}("610454273"), function{}(), impure{}(), hook{}("IO.tell"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(832,18,832,70)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblcategoryChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortString{} [klabel{}("categoryChar"), originalPrd{}(), productionID{}("1825719826"), function{}(), hook{}("STRING.category"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(527,21,527,80)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("949684105"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(823,22,823,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Stop'List{}() : SortList{} [klabel{}(".List"), originalPrd{}(), smtlib{}("smt_seq_nil"), latex{}("\\dotCt{List}"), productionID{}("943573036"), functional{}(), symbol'Kywd'{}(), function{}(), constructor{}(), hook{}("LIST.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(232,19,232,146)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortString{}, SortInt{}) : SortString{} [originalPrd{}(), productionID{}("379303133"), function{}(), hook{}("STRING.replace"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(514,21,514,107)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("899929247"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(822,22,822,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisMap{}(SortK{}) : SortBool{} [function{}(), predicate{}("Map"), originalPrd{}()]
  symbol Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("40170008"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(802,22,802,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [klabel{}("freshInt"), originalPrd{}(), productionID{}("573958827"), functional{}(), freshGenerator{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(394,18,394,72)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1670313965"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(789,22,789,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblnoStateCell{}() : SortStateCellOpt{} [cellOptAbsent{}("StateCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Hash'opendir'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [originalPrd{}(), productionID{}("237344028"), function{}(), impure{}(), hook{}("IO.opendir"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(846,20,846,81)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisTCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCellFragment"), originalPrd{}()]
  symbol Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("394785440"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(817,22,817,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Tild'Int'UndsUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [originalPrd{}(), latex{}("\\mathop{\\sim_{\\scriptstyle\\it Int}}{#1}"), productionID{}("704106237"), functional{}(), function{}(), hook{}("INT.not"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(334,18,334,133)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortS0}(SortBool{}, SortS0, SortS0) : SortS0 [originalPrd{}(), smtlib{}("ite"), productionID{}("1351478315"), functional{}(), poly{}("0, 2, 3"), function{}(), hook{}("KEQUAL.ite"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(731,16,731,122)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("951031848"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(776,22,776,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(SortId{}) : SortKItem{} [originalPrd{}(), productionID{}("1622458036"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(41,20,41,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(SortStateKey{}, SortStateValue{}) : SortAssignment{} [originalPrd{}(), productionID{}("1142347343"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,9,8,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]
  hooked-symbol Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [originalPrd{}(), productionID{}("350059321"), functional{}(), function{}(), hook{}("STRING.gt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(524,19,524,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EIO'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("164332069"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(774,22,774,27)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblnewUUID'Unds'STRING'Unds'{}() : SortString{} [originalPrd{}(), productionID{}("575935098"), function{}(), impure{}(), hook{}("STRING.uuid"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(530,21,530,67)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [klabel{}("rfindString"), originalPrd{}(), productionID{}("462526099"), function{}(), hook{}("STRING.rfind"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(500,18,500,86)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'MAP'UndsUnds'Map'Unds'K'Unds'K{}(SortMap{}, SortK{}, SortK{}) : SortMap{} [originalPrd{}(), productionID{}("41489123"), functional{}(), prefer{}(), function{}(), hook{}("MAP.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(113,18,113,96)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(SortAssignment{}, SortState{}) : SortState{} [originalPrd{}(), productionID{}("1581078471"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]
  hooked-symbol LblFloat2String'LParUndsRParUnds'STRING'UndsUnds'Float{}(SortFloat{}) : SortString{} [klabel{}("Float2String"), originalPrd{}(), productionID{}("1783568981"), functional{}(), function{}(), hook{}("STRING.float2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(504,21,504,105)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisId{}(SortK{}) : SortBool{} [function{}(), predicate{}("Id"), originalPrd{}()]
  hooked-symbol LblString2Int'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [klabel{}("String2Int"), originalPrd{}(), productionID{}("2075952726"), function{}(), hook{}("STRING.string2int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(507,21,507,91)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("2103569237"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(782,22,782,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), latex{}("{#1}\\mathrel{\\ll_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1236444285"), function{}(), hook{}("INT.shl"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(352,18,352,131)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(SortAExp{}) : SortKItem{} [originalPrd{}(), productionID{}("1052212904"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(36,20,36,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [originalPrd{}(), smtlib{}("distinct"), left{}(), productionID{}("1161322357"), functional{}(), function{}(), hook{}("BOOL.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(280,19,280,103)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [klabel{}("signExtendBitRangeInt"), originalPrd{}(), productionID{}("2017797638"), function{}(), hook{}("INT.signExtendBitRange"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(365,18,365,118)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblinitTCell{}(SortMap{}) : SortTCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("292138977"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(809,22,809,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisSet{}(SortK{}) : SortBool{} [function{}(), predicate{}("Set"), originalPrd{}()]
  symbol Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("2030411960"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(821,22,821,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'read'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [originalPrd{}(), productionID{}("1693226694"), function{}(), impure{}(), hook{}("IO.read"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(834,21,834,84)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [klabel{}("lengthString"), originalPrd{}(), productionID{}("1552326679"), functional{}(), function{}(), hook{}("STRING.length"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(494,18,494,84)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblMap'Coln'lookup{}(SortMap{}, SortK{}) : SortK{} [klabel{}("Map:lookup"), originalPrd{}(), productionID{}("271379554"), symbol'Kywd'{}(), function{}(), hook{}("MAP.lookup"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(108,16,108,104)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisString{}(SortK{}) : SortBool{} [function{}(), predicate{}("String"), originalPrd{}()]
  hooked-symbol LblId2String'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Id{}(SortId{}) : SortString{} [klabel{}("Id2String"), originalPrd{}(), productionID{}("643290333"), functional{}(), function{}(), hook{}("STRING.token2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(699,21,699,89)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [originalPrd{}(), smtlib{}("xor"), left{}(), productionID{}("106999035"), functional{}(), function{}(), boolOperation{}(), hook{}("BOOL.xor"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(274,19,274,114)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1095352419"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(773,22,773,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("mod"), left{}(), productionID{}("131872530"), function{}(), hook{}("INT.emod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(346,18,346,93)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'-Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [originalPrd{}(), latex{}("{#1}-_{\\it Map}{#2}"), productionID{}("1124162665"), functional{}(), function{}(), hook{}("MAP.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(120,18,120,120)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblinState'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(SortState{}, SortStateKey{}) : SortBool{} [klabel{}("inState"), originalPrd{}(), productionID{}("33233312"), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,19,15,53)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]
  symbol Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(SortBlock{}, SortBlock{}) : SortKItem{} [originalPrd{}(), productionID{}("1215904751"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(32,20,33,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol LblisInt{}(SortK{}) : SortBool{} [function{}(), predicate{}("Int"), originalPrd{}()]
  hooked-symbol LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(SortString{}, SortInt{}, SortInt{}) : SortString{} [klabel{}("substrString"), originalPrd{}(), productionID{}("1902671237"), function{}(), hook{}("STRING.substr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(498,21,498,87)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisStream{}(SortK{}) : SortBool{} [function{}(), predicate{}("Stream"), originalPrd{}()]
  symbol Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("929697158"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(777,22,777,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsPipe'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), latex{}("{#1}\\mathrel{|_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1834361038"), functional{}(), function{}(), hook{}("INT.or"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(358,18,358,140)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'stderr'Unds'K-IO'Unds'{}() : SortInt{} [originalPrd{}(), productionID{}("429353573"), functional{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(858,19,858,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblupdateMap'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [klabel{}("updateMap"), originalPrd{}(), productionID{}("26970580"), functional{}(), function{}(), hook{}("MAP.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(125,18,125,91)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("Cell"), originalPrd{}()]
  hooked-symbol Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [originalPrd{}(), smtlib{}("or"), left{}(), productionID{}("1593458942"), functional{}(), function{}(), boolOperation{}(), hook{}("BOOL.orElse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(276,19,276,116)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'getc'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortInt{} [originalPrd{}(), productionID{}("431506362"), function{}(), impure{}(), hook{}("IO.getc"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(833,18,833,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1991278377"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(775,22,775,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(SortInt{}) : SortKItem{} [originalPrd{}(), productionID{}("2072724423"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(37,20,37,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(SortAExp{}) : SortKItem{} [originalPrd{}(), productionID{}("34871826"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,20,43,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(SortInt{}, SortString{}, SortString{}) : SortKItem{} [originalPrd{}(), productionID{}("1470358122"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(870,20,870,110)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblList'Coln'get{}(SortList{}, SortInt{}) : SortK{} [klabel{}("List:get"), originalPrd{}(), productionID{}("1948810915"), symbol'Kywd'{}(), function{}(), hook{}("LIST.get"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(240,16,240,94)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [originalPrd{}(), left{}(), productionID{}("1616359099"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,20,7,64)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1267105885"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(771,22,771,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1371495133"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(820,22,820,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisAssignment{}(SortK{}) : SortBool{} [function{}(), predicate{}("Assignment"), originalPrd{}()]
  symbol Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1408482749"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(780,22,780,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'lstat'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [originalPrd{}(), productionID{}("153646652"), function{}(), impure{}(), hook{}("IO.lstat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(845,20,845,77)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1309335839"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(769,22,769,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(SortK{}) : SortStream{} [klabel{}("#buffer"), originalPrd{}(), productionID{}("169833205"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(864,21,864,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("208043846"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(827,22,827,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblnotBool'Unds'{}(SortBool{}) : SortBool{} [klabel{}("notBool_"), originalPrd{}(), smtlib{}("not"), latex{}("\\neg_{\\scriptstyle\\it Bool}{#1}"), productionID{}("502848122"), functional{}(), symbol'Kywd'{}(), function{}(), boolOperation{}(), hook{}("BOOL.not"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(271,19,271,174)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lblkeys'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortSet{} [klabel{}("keys"), originalPrd{}(), productionID{}("817299424"), functional{}(), function{}(), hook{}("MAP.keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(131,18,131,86)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblList'Coln'range{}(SortList{}, SortInt{}, SortInt{}) : SortList{} [klabel{}("List:range"), originalPrd{}(), productionID{}("2104973502"), symbol'Kywd'{}(), function{}(), hook{}("LIST.range"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(243,19,243,98)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [originalPrd{}(), left{}(), productionID{}("1676605578"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,64)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'Hash'unlock'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [originalPrd{}(), productionID{}("1871612052"), function{}(), impure{}(), hook{}("IO.unlock"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(842,16,842,80)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(SortStmt{}, SortStmt{}) : SortStmt{} [originalPrd{}(), left{}(), productionID{}("392918519"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(22,20,22,52)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1921242091"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(788,22,788,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [originalPrd{}(), smtlib{}("=>"), left{}(), productionID{}("530539368"), functional{}(), function{}(), boolOperation{}(), hook{}("BOOL.implies"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(277,19,277,117)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortBool{} [originalPrd{}(), productionID{}("38544126"), functional{}(), function{}(), hook{}("MAP.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(143,19,143,91)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [originalPrd{}(), productionID{}("107915280"), functional{}(), function{}(), hook{}("STRING.ge"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(525,19,525,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisStateCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("StateCell"), originalPrd{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'SET'UndsUnds'Set{}(SortSet{}) : SortK{} [klabel{}("Set:choice"), originalPrd{}(), productionID{}("1842853283"), function{}(), hook{}("SET.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(184,16,184,90)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1822525972"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(826,22,826,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lblsize'LParUndsRParUnds'LIST'UndsUnds'List{}(SortList{}) : SortInt{} [klabel{}("sizeList"), originalPrd{}(), smtlib{}("smt_seq_len"), productionID{}("1604247316"), functional{}(), function{}(), hook{}("LIST.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(249,18,249,121)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-GT--GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), latex{}("{#1}\\mathrel{\\gg_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("800088638"), function{}(), hook{}("INT.shr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(351,18,351,131)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsPipe'-'-GT-Unds'{}(SortK{}, SortK{}) : SortMap{} [klabel{}("_|->_"), originalPrd{}(), latex{}("{#1}\\mapsto{#2}"), productionID{}("1457263953"), functional{}(), symbol'Kywd'{}(), function{}(), hook{}("MAP.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,18,102,136)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'noparse'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("787122337"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(760,31,760,40)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisList{}(SortK{}) : SortBool{} [function{}(), predicate{}("List"), originalPrd{}()]
  hooked-symbol Lbl'Unds'in'UndsUnds'LIST'UndsUnds'K'Unds'List{}(SortK{}, SortList{}) : SortBool{} [klabel{}("_inList_"), originalPrd{}(), productionID{}("735937428"), functional{}(), function{}(), hook{}("LIST.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(246,19,246,97)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Stop'State'Unds'STATE-API'Unds'{}() : SortState{} [originalPrd{}(), productionID{}("1810923540"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,9,11,16)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]
  symbol Lbl'Hash'EINTR'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1481818223"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(772,22,772,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsStar'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("*"), latex{}("{#1}\\mathrel{\\ast_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("159475521"), functional{}(), function{}(), hook{}("INT.mul"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(339,18,339,155)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("896982466"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(803,22,803,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("873634936"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(781,22,781,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [originalPrd{}(), smtlib{}(">"), latex{}("{#1}\\mathrel{>_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("366252104"), functional{}(), function{}(), hook{}("INT.gt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(385,19,385,145)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisStateKey{}(SortK{}) : SortBool{} [function{}(), predicate{}("StateKey"), originalPrd{}()]
  hooked-symbol LbldirectionalityChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortString{} [klabel{}("directionalityChar"), originalPrd{}(), productionID{}("1571798597"), function{}(), hook{}("STRING.directionality"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(528,21,528,86)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsSlsh'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("div"), latex{}("{#1}\\mathrel{\\div_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("504807594"), function{}(), hook{}("INT.tdiv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(342,18,342,146)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'lock'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [originalPrd{}(), productionID{}("1796047085"), function{}(), impure{}(), hook{}("IO.lock"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(841,16,841,76)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'logToFile'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortK{} [klabel{}("#logToFile"), originalPrd{}(), productionID{}("1975873209"), returnsUnit{}(), functional{}(), function{}(), impure{}(), hook{}("IO.log"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(872,16,872,99)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblSetItem{}(SortK{}) : SortSet{} [klabel{}("SetItem"), originalPrd{}(), productionID{}("837659261"), functional{}(), symbol'Kywd'{}(), function{}(), hook{}("SET.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(166,18,166,108)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [klabel{}("rfindChar"), originalPrd{}(), productionID{}("1304589447"), function{}(), hook{}("STRING.rfindChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(502,18,502,90)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblinitStateCell{}() : SortStateCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Stop'Map{}() : SortMap{} [klabel{}(".Map"), originalPrd{}(), latex{}("\\dotCt{Map}"), productionID{}("1052317717"), functional{}(), symbol'Kywd'{}(), function{}(), constructor{}(), hook{}("MAP.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(97,18,97,128)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("int_min"), productionID{}("823914581"), functional{}(), function{}(), hook{}("INT.min"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(359,18,359,102)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("573200870"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(783,22,783,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblintersectSet'LParUndsCommUndsRParUnds'SET'UndsUnds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [klabel{}("intersectSet"), originalPrd{}(), productionID{}("648936749"), functional{}(), function{}(), hook{}("SET.intersection"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(169,18,169,88)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("596470015"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(770,22,770,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [originalPrd{}(), smtlib{}("<"), latex{}("{#1}\\mathrel{<_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1150058854"), functional{}(), function{}(), hook{}("INT.lt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(383,19,383,145)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisKItem{}(SortK{}) : SortBool{} [function{}(), predicate{}("KItem"), originalPrd{}()]
  hooked-symbol LblSet'Coln'difference{}(SortSet{}, SortSet{}) : SortSet{} [klabel{}("Set:difference"), originalPrd{}(), latex{}("{#1}-_{\\it Set}{#2}"), productionID{}("859236022"), functional{}(), symbol'Kywd'{}(), function{}(), hook{}("SET.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(172,18,172,146)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [klabel{}("findString"), originalPrd{}(), productionID{}("403174823"), function{}(), hook{}("STRING.find"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(499,18,499,85)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'open'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortInt{} [originalPrd{}(), productionID{}("2068897588"), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(830,18,830,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'UndsUnds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortBool{} [originalPrd{}(), productionID{}("542980314"), functional{}(), function{}(), hook{}("SET.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(178,19,178,85)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1204296383"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(793,22,793,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblremoveAll'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Set{}(SortMap{}, SortSet{}) : SortMap{} [klabel{}("removeAll"), originalPrd{}(), productionID{}("1270836494"), functional{}(), function{}(), hook{}("MAP.removeAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(128,18,128,91)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'parseInModule'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortKItem{} [klabel{}("#parseInModule"), originalPrd{}(), productionID{}("1192923170"), function{}(), impure{}(), hook{}("IO.parseInModule"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(849,20,852,76)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1423983012"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(765,22,765,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisKConfigVar{}(SortK{}) : SortBool{} [function{}(), predicate{}("KConfigVar"), originalPrd{}()]
  symbol Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}() : SortBlock{} [originalPrd{}(), productionID{}("2106165633"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,20,15,26)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(SortInt{}) : SortId{} [klabel{}("freshId"), originalPrd{}(), productionID{}("1204481453"), functional{}(), freshGenerator{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(701,17,701,70)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'stdin'Unds'K-IO'Unds'{}() : SortInt{} [originalPrd{}(), productionID{}("231311211"), functional{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(856,18,856,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'close'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortK{} [originalPrd{}(), productionID{}("2003147568"), function{}(), impure{}(), hook{}("IO.close"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(836,16,836,70)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'-LT-'T'-GT-'-fragment{}(SortKCellOpt{}, SortStateCellOpt{}) : SortTCellFragment{} [cellFragment{}("TCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [originalPrd{}(), smtlib{}("="), left{}(), productionID{}("479920916"), functional{}(), function{}(), hook{}("BOOL.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(279,19,279,96)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("485845532"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(799,22,799,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblnoKCell{}() : SortKCellOpt{} [cellOptAbsent{}("KCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("-"), latex{}("{#1}\\mathrel{-_{\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("98826337"), functional{}(), function{}(), hook{}("INT.sub"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(349,18,349,152)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisState{}(SortK{}) : SortBool{} [function{}(), predicate{}("State"), originalPrd{}()]
  symbol Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1819940427"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(784,22,784,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisKCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("KCell"), originalPrd{}()]
  symbol Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1324829744"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(787,22,787,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisPgm{}(SortK{}) : SortBool{} [function{}(), predicate{}("Pgm"), originalPrd{}()]
  symbol Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1650813924"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(778,22,778,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("int_max"), productionID{}("1680503330"), functional{}(), function{}(), hook{}("INT.max"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(360,18,360,102)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("1208532123"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(811,22,811,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'-LT-'k'-GT-'{}(SortK{}) : SortKCell{} [contentStartColumn{}("17"), contentStartLine{}("79"), originalPrd{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), cell{}(), maincell{}(), color{}("green"), functional{}(), format{}("%1%i%n%2%d%n%3"), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(79,17,82,21)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'Hash'putc'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [originalPrd{}(), productionID{}("516537656"), function{}(), impure{}(), hook{}("IO.putc"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(839,16,839,81)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'andBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [klabel{}("_andBool_"), originalPrd{}(), smtlib{}("and"), latex{}("{#1}\\wedge_{\\scriptstyle\\it Bool}{#2}"), left{}(), productionID{}("596910004"), functional{}(), symbol'Kywd'{}(), function{}(), boolOperation{}(), hook{}("BOOL.and"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(272,19,272,187)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisAExp{}(SortK{}) : SortBool{} [function{}(), predicate{}("AExp"), originalPrd{}()]
  symbol Lbl'Unds'Set'Unds'{}(SortSet{}, SortSet{}) : SortSet{} [idem{}(), klabel{}("_Set_"), assoc{}(), originalPrd{}(), left{}(), element{}("SetItem"), productionID{}("381708767"), functional{}(), unit{}(".Set"), format{}("%1%n%2"), symbol'Kywd'{}(), function{}(), hook{}("SET.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(159,18,159,176)"), comm{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'fresh'LParUndsRParUnds'K-REFLECTION'UndsUnds'String{}(SortString{}) : SortKItem{} [klabel{}("#fresh"), originalPrd{}(), productionID{}("442199874"), function{}(), impure{}(), hook{}("KREFLECTION.fresh"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(744,20,744,79)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblString2Base'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int{}(SortString{}, SortInt{}) : SortInt{} [klabel{}("String2Base"), originalPrd{}(), productionID{}("2113604623"), function{}(), hook{}("STRING.string2base"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(510,21,510,92)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol LblFloat2String'LParUndsCommUndsRParUnds'STRING'UndsUnds'Float'Unds'String{}(SortFloat{}, SortString{}) : SortString{} [klabel{}("FloatFormat"), originalPrd{}(), productionID{}("2113748097"), function{}(), hook{}("STRING.floatFormat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(505,21,505,113)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(SortBExp{}, SortBlock{}, SortBlock{}) : SortStmt{} [originalPrd{}(), productionID{}("351877391"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,20,20,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  hooked-symbol Lbl'UndsXor-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [originalPrd{}(), smtlib{}("^"), latex{}("{#1}\\mathrel{{\\char`\\^}_{\\!\\scriptstyle\\it Int}}{#2}"), left{}(), productionID{}("1880078449"), function{}(), hook{}("INT.pow"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(336,18,336,151)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EROFS'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("2003463579"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(794,22,794,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("193388045"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(806,22,806,39)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'UndsEqlsSlshEqls'K'UndsUnds'K-EQUAL'UndsUnds'K'Unds'K{}(SortK{}, SortK{}) : SortBool{} [originalPrd{}(), smtlib{}("distinct"), latex{}("{#1}\\mathrel{\\neq_K}{#2}"), productionID{}("459718907"), functional{}(), notEqualEqualK{}(), function{}(), hook{}("KEQUAL.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(724,19,724,144)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol LblisIOError{}(SortK{}) : SortBool{} [function{}(), predicate{}("IOError"), originalPrd{}()]
  symbol Lbl'-LT-'state'-GT-'{}(SortState{}) : SortStateCell{} [contentStartColumn{}("17"), contentStartLine{}("79"), originalPrd{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), cell{}(), color{}("red"), functional{}(), format{}("%1%i%n%2%d%n%3"), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(79,17,82,21)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol LblisFloat{}(SortK{}) : SortBool{} [function{}(), predicate{}("Float"), originalPrd{}()]
  hooked-symbol Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [originalPrd{}(), productionID{}("457247584"), function{}(), impure{}(), hook{}("IO.open"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(831,18,831,84)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("136157810"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(807,22,807,39)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}() : SortIOError{} [originalPrd{}(), productionID{}("746074699"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(766,22,766,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'stat'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [originalPrd{}(), productionID{}("1023268896"), function{}(), impure{}(), hook{}("IO.stat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(844,20,844,75)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  symbol Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(SortStmt{}) : SortBlock{} [originalPrd{}(), productionID{}("1221991240"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,20,16,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}() : SortKItem{} [originalPrd{}(), productionID{}("1153907750"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(39,20,39,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
  symbol LblisBlock{}(SortK{}) : SortBool{} [function{}(), predicate{}("Block"), originalPrd{}()]
  hooked-symbol Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'UndsUnds'K'Unds'Map{}(SortK{}, SortMap{}) : SortBool{} [originalPrd{}(), productionID{}("605420629"), functional{}(), function{}(), hook{}("MAP.in_keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(134,19,134,89)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// generated axioms
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(Y0:SortInt{})), Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EBADF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Stop'Set{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBADF'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'xorInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(K0:SortId{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(Y0:SortId{}, Y1:SortInt{})), Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortInt{}} (X1:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(Y0:SortBool{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(Y0:SortBool{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(Y0:SortId{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(K0:SortBExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(X0:SortBExp{}), Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(Y0:SortBExp{})), Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(X0:SortBExp{}), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(X0:SortBExp{}), Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(Y0:SortBExp{}, Y1:SortBExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'MAP'UndsUnds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortPgm{}, \equals{SortPgm{}, R} (Val:SortPgm{}, Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(K0:SortIds{}, K1:SortStmt{}))) [functional{}()] // functional
  axiom{}\implies{SortPgm{}} (\and{SortPgm{}} (Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(X0:SortIds{}, X1:SortStmt{}), Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(Y0:SortIds{}, Y1:SortStmt{})), Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(\and{SortIds{}} (X0:SortIds{}, Y0:SortIds{}), \and{SortStmt{}} (X1:SortStmt{}, Y1:SortStmt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, LblListItem{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(K0:SortId{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(Y0:SortId{}, Y1:SortAExp{})), Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(Y0:SortStmt{}, Y1:SortStmt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(K0:SortBool{}, K1:SortBlock{}, K2:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(Y0:SortBool{}, Y1:SortBlock{}, Y2:SortBlock{})), Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(\and{SortBool{}} (X0:SortBool{}, Y0:SortBool{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}), \and{SortBlock{}} (X2:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(Y0:SortBool{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(Y0:SortId{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(K0:SortMap{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsAnd'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCell{}, \equals{SortTCell{}, R} (Val:SortTCell{}, Lbl'-LT-'T'-GT-'{}(K0:SortKCell{}, K1:SortStateCell{}))) [functional{}()] // functional
  axiom{}\implies{SortTCell{}} (\and{SortTCell{}} (Lbl'-LT-'T'-GT-'{}(X0:SortKCell{}, X1:SortStateCell{}), Lbl'-LT-'T'-GT-'{}(Y0:SortKCell{}, Y1:SortStateCell{})), Lbl'-LT-'T'-GT-'{}(\and{SortKCell{}} (X0:SortKCell{}, Y0:SortKCell{}), \and{SortStateCell{}} (X1:SortStateCell{}, Y1:SortStateCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(Y0:SortBool{})), Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(\and{SortBool{}} (X0:SortBool{}, Y0:SortBool{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(Y0:SortId{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblSet'Coln'in{}(K0:SortK{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdout'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}())) [functional{}()] // functional
  axiom{}\not{SortIds{}} (\and{SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(Y0:SortId{}, Y1:SortIds{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{})), Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(Y0:SortId{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'UndsUnds'Map'Unds'K'Unds'K{}(K0:SortMap{}, K1:SortK{}, K2:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{})), Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortInt{}} (X1:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(Y0:SortId{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(Y0:SortBExp{}, Y1:SortBExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),K3:SortMap{}),Lbl'Unds'Map'Unds'{}(K1:SortMap{},Lbl'Unds'Map'Unds'{}(K2:SortMap{},K3:SortMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),Lbl'Unds'Map'Unds'{}(K2:SortMap{},K1:SortMap{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'Map'Unds'{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(K1:SortList{},K2:SortList{}),K3:SortList{}),Lbl'Unds'List'Unds'{}(K1:SortList{},Lbl'Unds'List'Unds'{}(K2:SortList{},K3:SortList{}))) [assoc{}()] // associativity
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Unds'List'Unds'{}(K0:SortList{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'SET'UndsUnds'Set{}(K0:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(K0:SortId{}, K1:SortIds{}))) [functional{}()] // functional
  axiom{}\implies{SortIds{}} (\and{SortIds{}} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(X0:SortId{}, X1:SortIds{}), Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(Y0:SortId{}, Y1:SortIds{})), Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortIds{}} (X1:SortIds{}, Y1:SortIds{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(X0:SortInt{}), Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(Y0:SortInt{})), Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(X0:SortInt{}), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(X0:SortInt{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{})), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(Y0:SortStmt{}, Y1:SortStmt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(K0:SortBExp{}, K1:SortBExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(X0:SortBExp{}, X1:SortBExp{}), Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(Y0:SortBExp{}, Y1:SortBExp{})), Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBExp{}} (X1:SortBExp{}, Y1:SortBExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(Y0:SortInt{}, Y1:SortInt{})), Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortInt{}} (X1:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(Y0:SortId{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Stop'List{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStateCellOpt{}, \equals{SortStateCellOpt{}, R} (Val:SortStateCellOpt{}, LblnoStateCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Tild'Int'UndsUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R, SortS0} \exists{R} (Val:SortS0, \equals{SortS0, R} (Val:SortS0, Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortS0}(K0:SortBool{}, K1:SortS0, K2:SortS0))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(X0:SortId{}), Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(Y0:SortId{})), Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(X0:SortId{}), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(X0:SortId{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(X0:SortId{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(X0:SortId{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(X0:SortId{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(X0:SortId{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAssignment{}, \equals{SortAssignment{}, R} (Val:SortAssignment{}, Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(K0:SortStateKey{}, K1:SortStateValue{}))) [functional{}()] // functional
  axiom{}\implies{SortAssignment{}} (\and{SortAssignment{}} (Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(X0:SortStateKey{}, X1:SortStateValue{}), Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(Y0:SortStateKey{}, Y1:SortStateValue{})), Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(\and{SortStateKey{}} (X0:SortStateKey{}, Y0:SortStateKey{}), \and{SortStateValue{}} (X1:SortStateValue{}, Y1:SortStateValue{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'MAP'UndsUnds'Map'Unds'K'Unds'K{}(K0:SortMap{}, K1:SortK{}, K2:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortState{}, \equals{SortState{}, R} (Val:SortState{}, Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(K0:SortAssignment{}, K1:SortState{}))) [functional{}()] // functional
  axiom{}\implies{SortState{}} (\and{SortState{}} (Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(X0:SortAssignment{}, X1:SortState{}), Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Y0:SortAssignment{}, Y1:SortState{})), Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(\and{SortAssignment{}} (X0:SortAssignment{}, Y0:SortAssignment{}), \and{SortState{}} (X1:SortState{}, Y1:SortState{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortState{}} (\and{SortState{}} (Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(X0:SortAssignment{}, X1:SortState{}), Lbl'Stop'State'Unds'STATE-API'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblFloat2String'LParUndsRParUnds'STRING'UndsUnds'Float{}(K0:SortFloat{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(K0:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{})), LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblId2String'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'-Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(K0:SortBlock{}, K1:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(X0:SortBlock{}, X1:SortBlock{}), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(Y0:SortBlock{}, Y1:SortBlock{})), Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(\and{SortBlock{}} (X0:SortBlock{}, Y0:SortBlock{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(X0:SortBlock{}, X1:SortBlock{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(X0:SortBlock{}, X1:SortBlock{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(X0:SortBlock{}, X1:SortBlock{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(X0:SortBlock{}, X1:SortBlock{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPipe'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stderr'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblupdateMap'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(Y0:SortInt{})), Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(K0:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(Y0:SortAExp{})), LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(K0:SortInt{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{})), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}), \and{SortString{}} (X2:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(X0:SortK{}), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(Y0:SortK{})), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblnotBool'Unds'{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lblkeys'LParUndsRParUnds'MAP'UndsUnds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(K0:SortStmt{}, K1:SortStmt{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(X0:SortStmt{}, X1:SortStmt{}), Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(Y0:SortStmt{}, Y1:SortStmt{})), Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(\and{SortStmt{}} (X0:SortStmt{}, Y0:SortStmt{}), \and{SortStmt{}} (X1:SortStmt{}, Y1:SortStmt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(X0:SortStmt{}, X1:SortStmt{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'LIST'UndsUnds'List{}(K0:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsPipe'-'-GT-Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'UndsUnds'LIST'UndsUnds'K'Unds'List{}(K0:SortK{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortState{}, \equals{SortState{}, R} (Val:SortState{}, Lbl'Stop'State'Unds'STATE-API'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsStar'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'logToFile'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSetItem{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Stop'Map{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblintersectSet'LParUndsCommUndsRParUnds'SET'UndsUnds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSet'Coln'difference{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'UndsUnds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblremoveAll'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Set{}(K0:SortMap{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBlock{}, \equals{SortBlock{}, R} (Val:SortBlock{}, Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortBlock{}} (\and{SortBlock{}} (Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}(), Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(Y0:SortStmt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdin'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCellFragment{}, \equals{SortTCellFragment{}, R} (Val:SortTCellFragment{}, Lbl'-LT-'T'-GT-'-fragment{}(K0:SortKCellOpt{}, K1:SortStateCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortTCellFragment{}} (\and{SortTCellFragment{}} (Lbl'-LT-'T'-GT-'-fragment{}(X0:SortKCellOpt{}, X1:SortStateCellOpt{}), Lbl'-LT-'T'-GT-'-fragment{}(Y0:SortKCellOpt{}, Y1:SortStateCellOpt{})), Lbl'-LT-'T'-GT-'-fragment{}(\and{SortKCellOpt{}} (X0:SortKCellOpt{}, Y0:SortKCellOpt{}), \and{SortStateCellOpt{}} (X1:SortStateCellOpt{}, Y1:SortStateCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, LblnoKCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKCell{}, \equals{SortKCell{}, R} (Val:SortKCell{}, Lbl'-LT-'k'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKCell{}} (\and{SortKCell{}} (Lbl'-LT-'k'-GT-'{}(X0:SortK{}), Lbl'-LT-'k'-GT-'{}(Y0:SortK{})), Lbl'-LT-'k'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),K3:SortSet{}),Lbl'Unds'Set'Unds'{}(K1:SortSet{},Lbl'Unds'Set'Unds'{}(K2:SortSet{},K3:SortSet{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),Lbl'Unds'Set'Unds'{}(K2:SortSet{},K1:SortSet{})) [comm{}()] // commutativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},K:SortSet{}),K:SortSet{}) [idem{}()] // idempotency
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Unds'Set'Unds'{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}, K2:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{})), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}), \and{SortBlock{}} (X2:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'K'UndsUnds'K-EQUAL'UndsUnds'K'Unds'K{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStateCell{}, \equals{SortStateCell{}, R} (Val:SortStateCell{}, Lbl'-LT-'state'-GT-'{}(K0:SortState{}))) [functional{}()] // functional
  axiom{}\implies{SortStateCell{}} (\and{SortStateCell{}} (Lbl'-LT-'state'-GT-'{}(X0:SortState{}), Lbl'-LT-'state'-GT-'{}(Y0:SortState{})), Lbl'-LT-'state'-GT-'{}(\and{SortState{}} (X0:SortState{}, Y0:SortState{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBlock{}, \equals{SortBlock{}, R} (Val:SortBlock{}, Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(K0:SortStmt{}))) [functional{}()] // functional
  axiom{}\implies{SortBlock{}} (\and{SortBlock{}} (Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(X0:SortStmt{}), Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(Y0:SortStmt{})), Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(\and{SortStmt{}} (X0:SortStmt{}, Y0:SortStmt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'UndsUnds'K'Unds'Map{}(K0:SortK{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{} \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortId{}, \exists{SortKItem{}} (X1:SortInt{}, Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInt{}, inj{SortInt{}, SortKItem{}} (Val:SortInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortPgm{}, inj{SortPgm{}, SortKItem{}} (Val:SortPgm{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCell{}, inj{SortKCell{}, SortKItem{}} (Val:SortKCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortBool{}, \exists{SortKItem{}} (X1:SortBlock{}, \exists{SortKItem{}} (X2:SortBlock{}, Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(X0:SortBool{}, X1:SortBlock{}, X2:SortBlock{})))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStateCellOpt{}, inj{SortStateCellOpt{}, SortKItem{}} (Val:SortStateCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSet{}, inj{SortSet{}, SortKItem{}} (Val:SortSet{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortBool{}, Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(X0:SortBool{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAssignment{}, inj{SortAssignment{}, SortKItem{}} (Val:SortAssignment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAExp{}, inj{SortAExp{}, SortKItem{}} (Val:SortAExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, \exists{SortKItem{}} (X1:SortInt{}, Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMap{}, inj{SortMap{}, SortKItem{}} (Val:SortMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStateKey{}, inj{SortStateKey{}, SortKItem{}} (Val:SortStateKey{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, \exists{SortKItem{}} (X1:SortInt{}, Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(X0:SortInt{}, X1:SortInt{}))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCell{}, inj{SortTCell{}, SortKItem{}} (Val:SortTCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortList{}, inj{SortList{}, SortKItem{}} (Val:SortList{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortId{}, Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(X0:SortId{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortAExp{}, LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOError{}, inj{SortIOError{}, SortKItem{}} (Val:SortIOError{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCellFragment{}, inj{SortTCellFragment{}, SortKItem{}} (Val:SortTCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortBlock{}, \exists{SortKItem{}} (X1:SortBlock{}, Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(X0:SortBlock{}, X1:SortBlock{}))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStateCell{}, inj{SortStateCell{}, SortKItem{}} (Val:SortStateCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(X0:SortInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortAExp{}, LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(X0:SortAExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, \exists{SortKItem{}} (X1:SortString{}, \exists{SortKItem{}} (X2:SortString{}, Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{})))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortState{}, inj{SortState{}, SortKItem{}} (Val:SortState{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortCell{}, inj{SortCell{}, SortKItem{}} (Val:SortCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBool{}, inj{SortBool{}, SortKItem{}} (Val:SortBool{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFloat{}, inj{SortFloat{}, SortKItem{}} (Val:SortFloat{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIds{}, inj{SortIds{}, SortKItem{}} (Val:SortIds{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortId{}, inj{SortId{}, SortKItem{}} (Val:SortId{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStateValue{}, inj{SortStateValue{}, SortKItem{}} (Val:SortStateValue{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStmt{}, inj{SortStmt{}, SortKItem{}} (Val:SortStmt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBExp{}, inj{SortBExp{}, SortKItem{}} (Val:SortBExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCellOpt{}, inj{SortKCellOpt{}, SortKItem{}} (Val:SortKCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortString{}, inj{SortString{}, SortKItem{}} (Val:SortString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKResult{}, inj{SortKResult{}, SortKItem{}} (Val:SortKResult{})), \or{SortKItem{}} (Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}(), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStream{}, inj{SortStream{}, SortKItem{}} (Val:SortStream{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBlock{}, inj{SortBlock{}, SortKItem{}} (Val:SortBlock{})), \bottom{SortKItem{}}()))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortList{}} (\exists{SortList{}} (X0:SortList{}, \exists{SortList{}} (X1:SortList{}, Lbl'Unds'List'Unds'{}(X0:SortList{}, X1:SortList{}))), \or{SortList{}} (Lbl'Stop'List{}(), \bottom{SortList{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTCellFragment{}} (\exists{SortTCellFragment{}} (X0:SortKCellOpt{}, \exists{SortTCellFragment{}} (X1:SortStateCellOpt{}, Lbl'-LT-'T'-GT-'-fragment{}(X0:SortKCellOpt{}, X1:SortStateCellOpt{}))), \bottom{SortTCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortString{}} (\top{SortString{}}(), \bottom{SortString{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortStateCell{}} (\exists{SortStateCell{}} (X0:SortState{}, Lbl'-LT-'state'-GT-'{}(X0:SortState{})), \bottom{SortStateCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKConfigVar{}} (\top{SortKConfigVar{}}(), \bottom{SortKConfigVar{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortTCell{}} (\exists{SortTCell{}} (X0:SortKCell{}, \exists{SortTCell{}} (X1:SortStateCell{}, Lbl'-LT-'T'-GT-'{}(X0:SortKCell{}, X1:SortStateCell{}))), \bottom{SortTCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), \or{SortIds{}} (\exists{SortIds{}} (X0:SortId{}, \exists{SortIds{}} (X1:SortIds{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(X0:SortId{}, X1:SortIds{}))), \bottom{SortIds{}}())) [constructor{}()] // no junk
  axiom{} \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortBExp{}, Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(X0:SortBExp{})), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortAExp{}, \exists{SortBExp{}} (X1:SortAExp{}, Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortBExp{}, \exists{SortBExp{}} (X1:SortBExp{}, Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(X0:SortBExp{}, X1:SortBExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (Val:SortBool{}, inj{SortBool{}, SortBExp{}} (Val:SortBool{})), \bottom{SortBExp{}}())))) [constructor{}()] // no junk
  axiom{} \or{SortStateCellOpt{}} (LblnoStateCell{}(), \or{SortStateCellOpt{}} (\exists{SortStateCellOpt{}} (Val:SortStateCell{}, inj{SortStateCell{}, SortStateCellOpt{}} (Val:SortStateCell{})), \bottom{SortStateCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortStateKey{}} (\exists{SortStateKey{}} (Val:SortId{}, inj{SortId{}, SortStateKey{}} (Val:SortId{})), \bottom{SortStateKey{}}()) [constructor{}()] // no junk
  axiom{} \or{SortId{}} (\top{SortId{}}(), \bottom{SortId{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortStream{}} (\exists{SortStream{}} (X0:SortK{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(X0:SortK{})), \bottom{SortStream{}}()) [constructor{}()] // no junk
  axiom{} \or{SortCell{}} (\exists{SortCell{}} (Val:SortKCell{}, inj{SortKCell{}, SortCell{}} (Val:SortKCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortTCell{}, inj{SortTCell{}, SortCell{}} (Val:SortTCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortStateCell{}, inj{SortStateCell{}, SortCell{}} (Val:SortStateCell{})), \bottom{SortCell{}}()))) [constructor{}()] // no junk
  axiom{} \or{SortBool{}} (\top{SortBool{}}(), \bottom{SortBool{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortAssignment{}} (\exists{SortAssignment{}} (X0:SortStateKey{}, \exists{SortAssignment{}} (X1:SortStateValue{}, Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(X0:SortStateKey{}, X1:SortStateValue{}))), \bottom{SortAssignment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKCell{}} (\exists{SortKCell{}} (X0:SortK{}, Lbl'-LT-'k'-GT-'{}(X0:SortK{})), \bottom{SortKCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortK{}} (\exists{SortK{}} (Val:SortKItem{}, inj{SortKItem{}, SortK{}} (Val:SortKItem{})), \bottom{SortK{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortInt{}, inj{SortInt{}, SortKResult{}} (Val:SortInt{})), \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortBool{}, inj{SortBool{}, SortKResult{}} (Val:SortBool{})), \bottom{SortKResult{}}())) [constructor{}()] // no junk
  axiom{} \or{SortMap{}} (\exists{SortMap{}} (X0:SortMap{}, \exists{SortMap{}} (X1:SortMap{}, Lbl'Unds'Map'Unds'{}(X0:SortMap{}, X1:SortMap{}))), \or{SortMap{}} (Lbl'Stop'Map{}(), \bottom{SortMap{}}())) [constructor{}()] // no junk
  axiom{} \or{SortKCellOpt{}} (\exists{SortKCellOpt{}} (Val:SortKCell{}, inj{SortKCell{}, SortKCellOpt{}} (Val:SortKCell{})), \or{SortKCellOpt{}} (LblnoKCell{}(), \bottom{SortKCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortId{}, \exists{SortStmt{}} (X1:SortAExp{}, Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}))), \or{SortStmt{}} (\exists{SortStmt{}} (Val:SortBlock{}, inj{SortBlock{}, SortStmt{}} (Val:SortBlock{})), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortBExp{}, \exists{SortStmt{}} (X1:SortBlock{}, Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}))), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortStmt{}, \exists{SortStmt{}} (X1:SortStmt{}, Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(X0:SortStmt{}, X1:SortStmt{}))), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortBExp{}, \exists{SortStmt{}} (X1:SortBlock{}, \exists{SortStmt{}} (X2:SortBlock{}, Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{})))), \bottom{SortStmt{}}()))))) [constructor{}()] // no junk
  axiom{} \or{SortInt{}} (\top{SortInt{}}(), \bottom{SortInt{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortFloat{}} (\top{SortFloat{}}(), \bottom{SortFloat{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortStateValue{}} (\exists{SortStateValue{}} (Val:SortInt{}, inj{SortInt{}, SortStateValue{}} (Val:SortInt{})), \bottom{SortStateValue{}}()) [constructor{}()] // no junk
  axiom{} \or{SortPgm{}} (\exists{SortPgm{}} (X0:SortIds{}, \exists{SortPgm{}} (X1:SortStmt{}, Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(X0:SortIds{}, X1:SortStmt{}))), \bottom{SortPgm{}}()) [constructor{}()] // no junk
  axiom{} \or{SortBlock{}} (Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}(), \or{SortBlock{}} (\exists{SortBlock{}} (X0:SortStmt{}, Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(X0:SortStmt{})), \bottom{SortBlock{}}())) [constructor{}()] // no junk
  axiom{} \or{SortSet{}} (Lbl'Stop'Set{}(), \or{SortSet{}} (\exists{SortSet{}} (X0:SortSet{}, \exists{SortSet{}} (X1:SortSet{}, Lbl'Unds'Set'Unds'{}(X0:SortSet{}, X1:SortSet{}))), \bottom{SortSet{}}())) [constructor{}()] // no junk
  axiom{} \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortInt{}, Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{})), \or{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}(), \bottom{SortIOError{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortState{}} (\exists{SortState{}} (X0:SortAssignment{}, \exists{SortState{}} (X1:SortState{}, Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(X0:SortAssignment{}, X1:SortState{}))), \or{SortState{}} (Lbl'Stop'State'Unds'STATE-API'Unds'{}(), \bottom{SortState{}}())) [constructor{}()] // no junk
  axiom{} \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortId{}, inj{SortId{}, SortAExp{}} (Val:SortId{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortInt{}, inj{SortInt{}, SortAExp{}} (Val:SortInt{})), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortInt{}, Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(X0:SortInt{})), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \bottom{SortAExp{}}()))))) [constructor{}()] // no junk

// rules
// rule `_andBool_`(B,#token("true","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(286) org.kframework.attributes.Location(Location(286,8,286,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(VarB:SortBool{},\dv{SortBool{}}("true")),
        VarB:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("286"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(286,8,286,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_modInt__INT__Int_Int`(I1,I2)=>`_%Int__INT__Int_Int`(`_+Int__INT__Int_Int`(`_%Int__INT__Int_Int`(I1,`absInt(_)_INT__Int`(I2)),`absInt(_)_INT__Int`(I2)),`absInt(_)_INT__Int`(I2)) requires `_=/=Int__INT__Int_Int`(I2,#token("0","Int")) ensures #token("true","Bool") [concrete() contentStartColumn(5) contentStartLine(374) org.kframework.attributes.Location(Location(374,5,377,23)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{}))),
      \top{R}()))
  [contentStartColumn{}("5"), contentStartLine{}("374"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), concrete{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(374,5,377,23)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `<T>`(`<k>`(`_<='__IMP-STRICT__Int_Int`(I1,I2)~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Bool,KItem}(`_<=Int__INT__Int_Int`(I1,I2))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(91) org.kframework.attributes.Location(Location(91,8,91,32)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("91"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(91,8,91,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `rfindChar(_,_,_)_STRING__String_String_Int`(S1,S2,I)=>`maxInt(_,_)_INT__Int_Int`(`rfindString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`rfindChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I)) requires `_=/=String__STRING__String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(538) org.kframework.attributes.Location(Location(538,8,538,182)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("\"\"")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},VarS2:SortString{},VarI:SortInt{}),
        LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("538"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(538,8,538,182)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule initTCell(Init)=>`<T>`(initKCell(Init),initStateCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTCell{},R} (
        LblinitTCell{}(VarInit:SortMap{}),
        Lbl'-LT-'T'-GT-'{}(LblinitKCell{}(VarInit:SortMap{}),LblinitStateCell{}())),
      \top{R}()))
  [initializer{}()]

// rule isAssignment(inj{Assignment,KItem}(Assignment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAssignment{}(kseq{}(inj{SortAssignment{}, SortKItem{}}(VarAssignment:SortAssignment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `set(_,_,_)_STATE-API__State_StateKey_StateValue`(`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(inj{Id,StateKey}(#token("n","Id")),V),S),inj{Id,StateKey}(#token("sum","Id")),V')=>`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(inj{Id,StateKey}(#token("n","Id")),V),`set(_,_,_)_STATE-API__State_StateKey_StateValue`(S,inj{Id,StateKey}(#token("sum","Id")),V')) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(71) org.kframework.attributes.Location(Location(71,8,71,101)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortState{},R} (
        Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("n")),VarV:SortStateValue{}),VarS:SortState{}),inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("sum")),VarV'Apos':SortStateValue{}),
        Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("n")),VarV:SortStateValue{}),Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("sum")),VarV'Apos':SortStateValue{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("71"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(71,8,71,101)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `<T>`(`<k>`(inj{Int,KItem}(I)~>`_=HOLE;_IMP-STRICT__Id`(X)~>DotVar1),DotVar0)=>`<T>`(`<k>`(`_='_;_IMP-STRICT__Id_Int`(X,I)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(54) org.kframework.attributes.Location(Location(54,8,54,42)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI:SortInt{}),kseq{}(Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(VarX:SortId{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(VarX:SortId{},VarI:SortInt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("54"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(54,8,54,42)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarId:SortId{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisId{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisId{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIOError(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarIOError:SortIOError{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisIOError{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOError{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{AExp,KItem}(AExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_andThenBool__BOOL__Bool_Bool`(K,#token("true","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(291) org.kframework.attributes.Location(Location(291,8,291,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK:SortBool{},\dv{SortBool{}}("true")),
        VarK:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("291"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(291,8,291,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_orBool__BOOL__Bool_Bool`(_9,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(301) org.kframework.attributes.Location(Location(301,8,301,34)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'9:SortBool{},\dv{SortBool{}}("true")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("301"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(301,8,301,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `bitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN)=>`_modInt__INT__Int_Int`(`_>>Int__INT__Int_Int`(I,IDX),`_<<Int__INT__Int_Int`(#token("1","Int"),LEN)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(367) org.kframework.attributes.Location(Location(367,8,367,70)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),
        Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds-GT--GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{}),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),VarLEN:SortInt{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("367"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(367,8,367,70)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKItem(inj{Pgm,KItem}(Pgm))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortPgm{}, SortKItem{}}(VarPgm:SortPgm{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `replaceFirst(_,_,_)_STRING__String_String_String`(Source,ToReplace,Replacement)=>`_+String__STRING__String_String`(`_+String__STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING__String`(ToReplace)),`lengthString(_)_STRING__String`(Source))) requires `_>=Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(546) org.kframework.attributes.Location(Location(546,8,548,66)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{}),
        Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("546"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(546,8,548,66)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isSet(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSet{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_impliesBool__BOOL__Bool_Bool`(#token("false","Bool"),_6)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(311) org.kframework.attributes.Location(Location(311,8,311,40)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),Var'Unds'6:SortBool{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("311"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(311,8,311,40)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `get(_,_)_STATE-API__State_StateKey`(`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(K,V),S),K)=>V requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(29) org.kframework.attributes.Location(Location(29,8,29,67)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStateValue{},R} (
        Lblget'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(VarK:SortStateKey{},VarV:SortStateValue{}),VarS:SortState{}),VarK:SortStateKey{}),
        VarV:SortStateValue{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("29"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(29,8,29,67)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]

// rule isCell(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `minInt(_,_)_INT__Int_Int`(I1,I2)=>I2 requires `_>=Int__INT__Int_Int`(I1,I2) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(380) org.kframework.attributes.Location(Location(380,8,380,57)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        VarI2:SortInt{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("380"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(380,8,380,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `set(_,_,_)_STATE-API__State_StateKey_StateValue`(`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(K,_19),S),K,V)=>`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(K,V),S) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(23) org.kframework.attributes.Location(Location(23,8,24,22)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortState{},R} (
        Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(VarK:SortStateKey{},Var'Unds'19:SortStateValue{}),VarS:SortState{}),VarK:SortStateKey{},VarV:SortStateValue{}),
        Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(VarK:SortStateKey{},VarV:SortStateValue{}),VarS:SortState{})),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("23"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(23,8,24,22)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]

// rule isList(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisList{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_==String__STRING__String_String`(S1,S2)=>`_==K_`(inj{String,KItem}(S1),inj{String,KItem}(S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(520) org.kframework.attributes.Location(Location(520,8,520,49)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS1:SortString{}),dotk{}()),kseq{}(inj{SortString{}, SortKItem{}}(VarS2:SortString{}),dotk{}()))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("520"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(520,8,520,49)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isId(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisId{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCell:SortTCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisTCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `inState(_,_)_STATE-API__State_StateKey`(`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(K,_20),S),K)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(27) org.kframework.attributes.Location(Location(27,8,27,74)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblinState'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(VarK:SortStateKey{},Var'Unds'20:SortStateValue{}),VarS:SortState{}),VarK:SortStateKey{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("27"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(27,8,27,74)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]

// rule `replaceFirst(_,_,_)_STRING__String_String_String`(Source,ToReplace,_16)=>Source requires `_<Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(549) org.kframework.attributes.Location(Location(549,8,550,57)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},Var'Unds'16:SortString{}),
        VarSource:SortString{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("549"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(549,8,550,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isBlock(inj{Block,KItem}(Block))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBlock{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIds(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarIds:SortIds{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisIds{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIds{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{KResult,KItem}(KResult))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_dividesInt__INT__Int_Int`(I1,I2)=>`_==Int__INT__Int_Int`(`_%Int__INT__Int_Int`(I2,I1),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(392) org.kframework.attributes.Location(Location(392,8,392,58)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'dividesInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},VarI1:SortInt{}),\dv{SortInt{}}("0"))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("392"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(392,8,392,58)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCell:SortKCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKCellOpt{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCellOpt:SortKCellOpt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKCellOpt{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `#stdout_K-IO_`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(861) org.kframework.attributes.Location(Location(861,8,861,20)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stdout'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("1")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("861"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(861,8,861,20)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isFloat(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarFloat:SortFloat{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisFloat{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFloat{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_andBool_`(#token("false","Bool"),_5)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(287) org.kframework.attributes.Location(Location(287,8,287,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("false"),Var'Unds'5:SortBool{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("287"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(287,8,287,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `findChar(_,_,_)_STRING__String_String_Int`(_14,#token("\"\"","String"),_15)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(537) org.kframework.attributes.Location(Location(537,8,537,32)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(Var'Unds'14:SortString{},\dv{SortString{}}("\"\""),Var'Unds'15:SortInt{}),
        \dv{SortInt{}}("-1")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("537"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(537,8,537,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isStmt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBlock:SortBlock{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStmt{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStmt:SortStmt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStmt{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStmt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(inj{Id,KItem}(X)~>DotVar1),`<state>`(S))=>`<T>`(`<k>`(inj{StateValue,KItem}(`get(_,_)_STATE-API__State_StateKey`(S,inj{Id,StateKey}(X)))~>DotVar1),`<state>`(S)) requires `inState(_,_)_STATE-API__State_StateKey`(S,inj{Id,StateKey}(X)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(85) org.kframework.attributes.Location(Location(85,8,86,30)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{} \and{SortTCell{}} (
    \equals{SortBool{},SortTCell{}}(
        LblinState'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(VarX:SortId{})),
        \dv{SortBool{}}("true")), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),VarDotVar1:SortK{})),Lbl'-LT-'state'-GT-'{}(VarS:SortState{})),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStateValue{}, SortKItem{}}(Lblget'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(VarX:SortId{}))),VarDotVar1:SortK{})),Lbl'-LT-'state'-GT-'{}(VarS:SortState{})))))
  [contentStartColumn{}("8"), contentStartLine{}("85"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(85,8,86,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `_andBool_`(_0,#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(288) org.kframework.attributes.Location(Location(288,8,288,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(Var'Unds'0:SortBool{},\dv{SortBool{}}("false")),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("288"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(288,8,288,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule initKCell(Init)=>`<k>`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$PGM","KConfigVar")))) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKCell{},R} (
        LblinitKCell{}(VarInit:SortMap{}),
        Lbl'-LT-'k'-GT-'{}(LblMap'Coln'lookup{}(VarInit:SortMap{},kseq{}(inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$PGM")),dotk{}())))),
      \top{R}()))
  [initializer{}()]

// rule `_impliesBool__BOOL__Bool_Bool`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(310) org.kframework.attributes.Location(Location(310,8,310,36)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("true"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("310"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(310,8,310,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_orBool__BOOL__Bool_Bool`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(302) org.kframework.attributes.Location(Location(302,8,302,32)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("302"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(302,8,302,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_orElseBool__BOOL__Bool_Bool`(_8,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(306) org.kframework.attributes.Location(Location(306,8,306,33)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'8:SortBool{},\dv{SortBool{}}("true")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("306"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(306,8,306,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_andThenBool__BOOL__Bool_Bool`(#token("true","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(290) org.kframework.attributes.Location(Location(290,8,290,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("true"),VarK:SortBool{}),
        VarK:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("290"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(290,8,290,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCell:SortStateCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisCell{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCell:SortTCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarCell:SortCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisCell{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCell:SortKCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}()))))),
        \bottom{R}()))))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isK(K)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisK{}(VarK:SortK{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_=/=String__STRING__String_String`(S1,S2)=>`notBool_`(`_==String__STRING__String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(519) org.kframework.attributes.Location(Location(519,8,519,65)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("519"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(519,8,519,65)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKItem(inj{StateKey,KItem}(StateKey))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStateKey{}, SortKItem{}}(VarStateKey:SortStateKey{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `signExtendBitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN)=>`_-Int__INT__Int_Int`(`_modInt__INT__Int_Int`(`_+Int__INT__Int_Int`(`bitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN),`_<<Int__INT__Int_Int`(#token("1","Int"),`_-Int__INT__Int_Int`(LEN,#token("1","Int")))),`_<<Int__INT__Int_Int`(#token("1","Int"),LEN)),`_<<Int__INT__Int_Int`(#token("1","Int"),`_-Int__INT__Int_Int`(LEN,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(369) org.kframework.attributes.Location(Location(369,8,369,149)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),
        Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarLEN:SortInt{},\dv{SortInt{}}("1")))),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),VarLEN:SortInt{})),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarLEN:SortInt{},\dv{SortInt{}}("1"))))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("369"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(369,8,369,149)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_==Bool__BOOL__Bool_Bool`(K1,K2)=>`_==K_`(inj{Bool,KItem}(K1),inj{Bool,KItem}(K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(729) org.kframework.attributes.Location(Location(729,8,729,43)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK1:SortBool{},VarK2:SortBool{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarK1:SortBool{}),dotk{}()),kseq{}(inj{SortBool{}, SortKItem{}}(VarK2:SortBool{}),dotk{}()))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("729"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(729,8,729,43)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isStmt(inj{Block,KItem}(Block))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStmt{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isAExp(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{BExp,KItem}(BExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Int,KItem}(I1)~>`HOLE<=__IMP-STRICT__AExp`(A2)~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(A2)~>`_<=HOLE_IMP-STRICT__Int`(I1)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(51) org.kframework.attributes.Location(Location(51,8,51,53)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI1:SortInt{}),kseq{}(LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(VarA2:SortAExp{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarA2:SortAExp{}),kseq{}(Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(VarI1:SortInt{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("51"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(51,8,51,53)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isAExp(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `freshInt(_)_INT__Int`(I)=>I requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(395) org.kframework.attributes.Location(Location(395,8,395,28)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI:SortInt{}),
        VarI:SortInt{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("395"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(395,8,395,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_=/=K__K-EQUAL__K_K`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(727) org.kframework.attributes.Location(Location(727,8,727,45)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'K'UndsUnds'K-EQUAL'UndsUnds'K'Unds'K{}(VarK1:SortK{},VarK2:SortK{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'K'Unds'{}(VarK1:SortK{},VarK2:SortK{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("727"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(727,8,727,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `#stderr_K-IO_`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(862) org.kframework.attributes.Location(Location(862,8,862,20)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stderr'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("2")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("862"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(862,8,862,20)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKItem(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKConfigVar(inj{KConfigVar,KItem}(KConfigVar))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKConfigVar{}(kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isInt(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisInt{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{Stream,KItem}(Stream))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_impliesBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>`notBool_`(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(313) org.kframework.attributes.Location(Location(313,8,313,45)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        LblnotBool'Unds'{}(VarB:SortBool{})),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("313"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(313,8,313,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isBlock(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBlock:SortBlock{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisBlock{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBlock{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{Cell,KItem}(Cell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_>String__STRING__String_String`(S1,S2)=>`_<String__STRING__String_String`(S2,S1) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(533) org.kframework.attributes.Location(Location(533,8,533,52)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{})),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("533"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(533,8,533,52)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_andThenBool__BOOL__Bool_Bool`(#token("false","Bool"),_4)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(292) org.kframework.attributes.Location(Location(292,8,292,36)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),Var'Unds'4:SortBool{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("292"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(292,8,292,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_impliesBool__BOOL__Bool_Bool`(_7,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(312) org.kframework.attributes.Location(Location(312,8,312,39)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'7:SortBool{},\dv{SortBool{}}("true")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("312"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(312,8,312,39)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isBExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBool:SortBool{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisBExp{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBExp:SortBExp{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisBExp{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBExp{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisInt{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisInt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isStateCellOpt(inj{StateCellOpt,KItem}(StateCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCellOpt{}(kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKCellOpt(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Bool,KItem}(T)~>`!HOLE_IMP-STRICT_`(.KList)~>DotVar1),DotVar0)=>`<T>`(`<k>`(`!'__IMP-STRICT__Bool`(T)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(49) org.kframework.attributes.Location(Location(49,8,49,32)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarT:SortBool{}),kseq{}(Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}(),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(VarT:SortBool{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("49"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(49,8,49,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `rfindChar(_,_,_)_STRING__String_String_Int`(_17,#token("\"\"","String"),_18)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(539) org.kframework.attributes.Location(Location(539,8,539,33)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(Var'Unds'17:SortString{},\dv{SortString{}}("\"\""),Var'Unds'18:SortInt{}),
        \dv{SortInt{}}("-1")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("539"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(539,8,539,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isStream(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStream:SortStream{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStream{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStream{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isPgm(inj{Pgm,KItem}(Pgm))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisPgm{}(kseq{}(inj{SortPgm{}, SortKItem{}}(VarPgm:SortPgm{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStateKey(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateKey{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{StateCellOpt,KItem}(StateCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_<=String__STRING__String_String`(S1,S2)=>`notBool_`(`_<String__STRING__String_String`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(532) org.kframework.attributes.Location(Location(532,8,532,63)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("532"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(532,8,532,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarList:SortList{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisList{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisList{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIds(inj{Ids,KItem}(Ids))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIds{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{Stmt,KItem}(Stmt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(`if'(_)_else__IMP-STRICT__Bool_Block_Block`(#token("true","Bool"),S,_26)~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Block,KItem}(S)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(101) org.kframework.attributes.Location(Location(101,8,101,33)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(\dv{SortBool{}}("true"),VarS:SortBlock{},Var'Unds'26:SortBlock{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarS:SortBlock{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("101"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(101,8,101,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `<T>`(`<k>`(`_='_;_IMP-STRICT__Id_Int`(X,I)~>DotVar1),`<state>`(S))=>`<T>`(`<k>`(DotVar1),`<state>`(`set(_,_,_)_STATE-API__State_StateKey_StateValue`(S,inj{Id,StateKey}(X),inj{Int,StateValue}(I)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(99) org.kframework.attributes.Location(Location(99,8,99,77)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lbl'UndsEqlsAposUndsSClnUnds'IMP-STRICT'UndsUnds'Id'Unds'Int{}(VarX:SortId{},VarI:SortInt{}),VarDotVar1:SortK{})),Lbl'-LT-'state'-GT-'{}(VarS:SortState{})),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar1:SortK{}),Lbl'-LT-'state'-GT-'{}(Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(VarX:SortId{}),inj{SortInt{}, SortStateValue{}}(VarI:SortInt{})))))))
  [contentStartColumn{}("8"), contentStartLine{}("99"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(99,8,99,77)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `_orElseBool__BOOL__Bool_Bool`(K,#token("false","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(308) org.kframework.attributes.Location(Location(308,8,308,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK:SortBool{},\dv{SortBool{}}("false")),
        VarK:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("308"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(308,8,308,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_xorBool__BOOL__Bool_Bool`(B1,B2)=>`notBool_`(`_==Bool__BOOL__Bool_Bool`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(298) org.kframework.attributes.Location(Location(298,8,298,57)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("298"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(298,8,298,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `findChar(_,_,_)_STRING__String_String_Int`(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(`_==Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I),`#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(`_==Int__INT__Int_Int`(`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I),#token("-1","Int")),`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I)))) requires `_=/=String__STRING__String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(536) org.kframework.attributes.Location(Location(536,8,536,431)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("\"\"")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},VarS2:SortString{},VarI:SortInt{}),
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortInt{}}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}),Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortInt{}}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}))))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("536"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(536,8,536,431)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `get(_,_)_STATE-API__State_StateKey`(`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(inj{Id,StateKey}(#token("sum","Id")),_23),S),inj{Id,StateKey}(#token("n","Id")))=>`get(_,_)_STATE-API__State_StateKey`(S,inj{Id,StateKey}(#token("n","Id"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(57) org.kframework.attributes.Location(Location(57,8,57,59)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStateValue{},R} (
        Lblget'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("sum")),Var'Unds'23:SortStateValue{}),VarS:SortState{}),inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("n"))),
        Lblget'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("n")))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("57"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(57,8,57,59)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarMap:SortMap{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisMap{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMap{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(283) org.kframework.attributes.Location(Location(283,8,283,29)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblnotBool'Unds'{}(\dv{SortBool{}}("false")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("283"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(283,8,283,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isStream(inj{Stream,KItem}(Stream))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStream{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKResult(inj{KResult,KItem}(KResult))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`___IMP-SYNTAX__Stmt_Stmt`(S1,S2))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(S1)~>inj{Stmt,KItem}(S2)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(100) org.kframework.attributes.Location(Location(100,8,100,35)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(VarS1:SortStmt{},VarS2:SortStmt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarS1:SortStmt{}),kseq{}(inj{SortStmt{}, SortKItem{}}(VarS2:SortStmt{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("100"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(100,8,100,35)"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isStateValue(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateValue{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Block,KItem}(`{}_IMP-SYNTAX_`(.KList))~>DotVar1),DotVar0)=>`<T>`(`<k>`(DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(96) org.kframework.attributes.Location(Location(96,8,96,15)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}()),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar1:SortK{}),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("96"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(96,8,96,15)"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `#open(_)_K-IO__String`(S)=>`#open(_,_)_K-IO__String_String`(S,#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(854) org.kframework.attributes.Location(Location(854,8,854,48)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'open'LParUndsRParUnds'K-IO'UndsUnds'String{}(VarS:SortString{}),
        Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(VarS:SortString{},\dv{SortString{}}("\"r+\""))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("854"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(854,8,854,48)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_andThenBool__BOOL__Bool_Bool`(_3,#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(293) org.kframework.attributes.Location(Location(293,8,293,36)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'3:SortBool{},\dv{SortBool{}}("false")),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("293"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(293,8,293,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `<T>`(`<k>`(inj{Int,KItem}(I2)~>`_<=HOLE_IMP-STRICT__Int`(I1)~>DotVar1),DotVar0)=>`<T>`(`<k>`(`_<='__IMP-STRICT__Int_Int`(I1,I2)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(52) org.kframework.attributes.Location(Location(52,8,52,45)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI2:SortInt{}),kseq{}(Lbl'Unds-LT-Eqls'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(VarI1:SortInt{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lbl'Unds-LT-EqlsAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("52"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(52,8,52,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `_orElseBool__BOOL__Bool_Bool`(#token("false","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(307) org.kframework.attributes.Location(Location(307,8,307,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarK:SortBool{}),
        VarK:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("307"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(307,8,307,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isFloat(inj{Float,KItem}(Float))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFloat{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isBool(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBool:SortBool{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisBool{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBool{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCellFragment:SortTCellFragment{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisTCellFragment{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{IOError,KItem}(IOError))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isState(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarState:SortState{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisState{}(kseq{}(inj{SortState{}, SortKItem{}}(VarState:SortState{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisState{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX__BExp_Block_Block`(B,B1,B2))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(B)~>`if(HOLE)_else__IMP-STRICT__Block_Block`(B1,B2)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(46) org.kframework.attributes.Location(Location(46,8,46,71)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(VarB:SortBExp{},VarB1:SortBlock{},VarB2:SortBlock{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarB:SortBExp{}),kseq{}(Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(VarB1:SortBlock{},VarB2:SortBlock{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("46"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(46,8,46,71)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `_orBool__BOOL__Bool_Bool`(#token("true","Bool"),_2)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(300) org.kframework.attributes.Location(Location(300,8,300,34)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("true"),Var'Unds'2:SortBool{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("300"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(300,8,300,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isAExp(inj{AExp,KItem}(AExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_xorBool__BOOL__Bool_Bool`(B,B)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(297) org.kframework.attributes.Location(Location(297,8,297,38)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},VarB:SortBool{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("297"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(297,8,297,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `replace(_,_,_,_)_STRING__String_String_String_Int`(Source,_12,_13,#token("0","Int"))=>Source requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(557) org.kframework.attributes.Location(Location(557,8,557,49)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},Var'Unds'12:SortString{},Var'Unds'13:SortString{},\dv{SortInt{}}("0")),
        VarSource:SortString{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("557"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(557,8,557,49)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `freshId(_)_ID-SYNTAX__Int`(I)=>`String2Id(_)_ID-SYNTAX__String`(`_+String__STRING__String_String`(#token("\"_\"","String"),`Int2String(_)_STRING__Int`(I))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(709) org.kframework.attributes.Location(Location(709,8,709,62)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortId{},R} (
        LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(VarI:SortInt{}),
        LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(\dv{SortString{}}("\"_\""),LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(VarI:SortInt{})))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("709"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(709,8,709,62)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKCellOpt(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Pgm,KItem}(`int_;__IMP-SYNTAX__Ids_Stmt`(`_,__IMP-SYNTAX__Id_Ids`(X,Xs),_27))),`<state>`(S))=>`<T>`(`<k>`(inj{Pgm,KItem}(`int_;__IMP-SYNTAX__Ids_Stmt`(Xs,_27))),`<state>`(`set(_,_,_)_STATE-API__State_StateKey_StateValue`(S,inj{Id,StateKey}(X),inj{Int,StateValue}(#token("0","Int"))))) requires `notBool_`(`inState(_,_)_STATE-API__State_StateKey`(S,inj{Id,StateKey}(X))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(105) org.kframework.attributes.Location(Location(105,8,106,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{} \and{SortTCell{}} (
    \equals{SortBool{},SortTCell{}}(
        LblnotBool'Unds'{}(LblinState'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(VarX:SortId{}))),
        \dv{SortBool{}}("true")), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortPgm{}, SortKItem{}}(Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(VarX:SortId{},VarXs:SortIds{}),Var'Unds'27:SortStmt{})),dotk{}())),Lbl'-LT-'state'-GT-'{}(VarS:SortState{})),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortPgm{}, SortKItem{}}(Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(VarXs:SortIds{},Var'Unds'27:SortStmt{})),dotk{}())),Lbl'-LT-'state'-GT-'{}(Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(VarX:SortId{}),inj{SortInt{}, SortStateValue{}}(\dv{SortInt{}}("0"))))))))
  [contentStartColumn{}("8"), contentStartLine{}("105"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(105,8,106,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isPgm(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarPgm:SortPgm{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisPgm{}(kseq{}(inj{SortPgm{}, SortKItem{}}(VarPgm:SortPgm{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisPgm{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_xorBool__BOOL__Bool_Bool`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(295) org.kframework.attributes.Location(Location(295,8,295,38)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("295"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(295,8,295,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `minInt(_,_)_INT__Int_Int`(I1,I2)=>I1 requires `_<=Int__INT__Int_Int`(I1,I2) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(379) org.kframework.attributes.Location(Location(379,8,379,57)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        VarI1:SortInt{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("379"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(379,8,379,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isSet(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarSet:SortSet{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisSet{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSet{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{Assignment,KItem}(Assignment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortAssignment{}, SortKItem{}}(VarAssignment:SortAssignment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCellFragment(inj{TCellFragment,KItem}(TCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellFragment{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(C,_10,B2)=>B2 requires `notBool_`(C) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(734) org.kframework.attributes.Location(Location(734,8,734,64)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        LblnotBool'Unds'{}(VarC:SortBool{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortK{},R} (
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortK{}}(VarC:SortBool{},Var'Unds'10:SortK{},VarB2:SortK{}),
        VarB2:SortK{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("734"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(734,8,734,64)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKItem(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Block,KItem}(`{_}_IMP-SYNTAX__Stmt`(S))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(S)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(97) org.kframework.attributes.Location(Location(97,8,97,16)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(VarS:SortStmt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarS:SortStmt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("97"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(97,8,97,16)"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isTCell(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIOError(inj{IOError,KItem}(IOError))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOError{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStateKey(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateKey:SortStateKey{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateKey{}(kseq{}(inj{SortStateKey{}, SortKItem{}}(VarStateKey:SortStateKey{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarId:SortId{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateKey{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateKey{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isAExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarAExp:SortAExp{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisAExp{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisAExp{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarId:SortId{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisAExp{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}()))))),
        \bottom{R}())))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(`_+'__IMP-STRICT__Int_Int`(I1,I2)~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Int,KItem}(`_+Int__INT__Int_Int`(I1,I2))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(88) org.kframework.attributes.Location(Location(88,8,88,30)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("88"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(88,8,88,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule initStateCell(.KList)=>`<state>`(`.State_STATE-API_`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStateCell{},R} (
        LblinitStateCell{}(),
        Lbl'-LT-'state'-GT-'{}(Lbl'Stop'State'Unds'STATE-API'Unds'{}())),
      \top{R}()))
  [initializer{}()]

// rule `<T>`(`<k>`(inj{Bool,KItem}(T)~>`if(HOLE)_else__IMP-STRICT__Block_Block`(B1,B2)~>DotVar1),DotVar0)=>`<T>`(`<k>`(`if'(_)_else__IMP-STRICT__Bool_Block_Block`(T,B1,B2)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(47) org.kframework.attributes.Location(Location(47,8,47,72)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarT:SortBool{}),kseq{}(Lblif'LPar'HOLE'RParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Block'Unds'Block{}(VarB1:SortBlock{},VarB2:SortBlock{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(VarT:SortBool{},VarB1:SortBlock{},VarB2:SortBlock{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("47"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,8,47,72)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `_orElseBool__BOOL__Bool_Bool`(#token("true","Bool"),_1)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(305) org.kframework.attributes.Location(Location(305,8,305,33)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("true"),Var'Unds'1:SortBool{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("305"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(305,8,305,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `<T>`(`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX__AExp_AExp`(A1,A2))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(A1)~>`HOLE+__IMP-STRICT__AExp`(A2)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(55) org.kframework.attributes.Location(Location(55,8,55,44)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarA1:SortAExp{},VarA2:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarA1:SortAExp{}),kseq{}(LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(VarA2:SortAExp{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("55"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(55,8,55,44)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isKItem(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarString:SortString{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisString{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisString{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX__AExp_AExp`(A1,A2))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(A1)~>`HOLE<=__IMP-STRICT__AExp`(A2)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(50) org.kframework.attributes.Location(Location(50,8,50,46)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarA1:SortAExp{},VarA2:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarA1:SortAExp{}),kseq{}(LblHOLE'-LT-EqlsUndsUnds'IMP-STRICT'UndsUnds'AExp{}(VarA2:SortAExp{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("50"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(50,8,50,46)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `get(_,_)_STATE-API__State_StateKey`(`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(inj{Id,StateKey}(#token("n","Id")),_22),S),inj{Id,StateKey}(#token("sum","Id")))=>`get(_,_)_STATE-API__State_StateKey`(S,inj{Id,StateKey}(#token("sum","Id"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(56) org.kframework.attributes.Location(Location(56,8,56,61)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStateValue{},R} (
        Lblget'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("n")),Var'Unds'22:SortStateValue{}),VarS:SortState{}),inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("sum"))),
        Lblget'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("sum")))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("56"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(56,8,56,61)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `#stdin_K-IO_`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(860) org.kframework.attributes.Location(Location(860,8,860,19)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stdin'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("0")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("860"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(860,8,860,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isStateCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCellOpt:SortStateCellOpt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateCellOpt{}(kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCell:SortStateCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateCellOpt{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCell:SortKCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`_=_;_IMP-SYNTAX__Id_AExp`(X,A))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(A)~>`_=HOLE;_IMP-STRICT__Id`(X)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(53) org.kframework.attributes.Location(Location(53,8,53,42)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(VarX:SortId{},VarA:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarA:SortAExp{}),kseq{}(Lbl'UndsEqls'HOLE'SClnUnds'IMP-STRICT'UndsUnds'Id{}(VarX:SortId{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("53"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(53,8,53,42)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isKItem(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStateValue(inj{StateValue,KItem}(StateValue))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateValue{}(kseq{}(inj{SortStateValue{}, SortKItem{}}(VarStateValue:SortStateValue{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{Block,KItem}(Block))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_==Int__INT__Int_Int`(I1,I2)=>`_==K_`(inj{Int,KItem}(I1),inj{Int,KItem}(I2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(390) org.kframework.attributes.Location(Location(390,8,390,40)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI1:SortInt{}),dotk{}()),kseq{}(inj{SortInt{}, SortKItem{}}(VarI2:SortInt{}),dotk{}()))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("390"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(390,8,390,40)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKItem(inj{KItem,KItem}(KItem))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortKItem{}, SortKItem{}}(VarKItem:SortKItem{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isState(inj{State,KItem}(State))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisState{}(kseq{}(inj{SortState{}, SortKItem{}}(VarState:SortState{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_divInt__INT__Int_Int`(I1,I2)=>`_/Int__INT__Int_Int`(`_-Int__INT__Int_Int`(I1,`_modInt__INT__Int_Int`(I1,I2)),I2) requires `_=/=Int__INT__Int_Int`(I2,#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(371) org.kframework.attributes.Location(Location(371,8,372,23)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Unds'divInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsSlsh'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarI2:SortInt{})),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("371"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(371,8,372,23)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Pgm,KItem}(`int_;__IMP-SYNTAX__Ids_Stmt`(`.List{"_,__IMP-SYNTAX__Id_Ids"}_Ids`(.KList),S))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(S)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(107) org.kframework.attributes.Location(Location(107,8,107,24)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortPgm{}, SortKItem{}}(Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}(),VarS:SortStmt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarS:SortStmt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("107"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(107,8,107,24)"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isKItem(inj{Ids,KItem}(Ids))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Int,KItem}(I2)~>`_+HOLE_IMP-STRICT__Int`(I1)~>DotVar1),DotVar0)=>`<T>`(`<k>`(`_+'__IMP-STRICT__Int_Int`(I1,I2)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(57) org.kframework.attributes.Location(Location(57,8,57,43)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI2:SortInt{}),kseq{}(Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(VarI1:SortInt{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lbl'UndsPlusAposUndsUnds'IMP-STRICT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("57"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(57,8,57,43)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX__AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Int,KItem}(`_/Int__INT__Int_Int`(I1,I2))~>DotVar1),DotVar0) requires `_=/=Int__INT__Int_Int`(I2,#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(87) org.kframework.attributes.Location(Location(87,8,87,51)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{} \and{SortTCell{}} (
    \equals{SortBool{},SortTCell{}}(
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsSlsh'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("87"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(87,8,87,51)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isStateCell(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCell{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_>=String__STRING__String_String`(S1,S2)=>`notBool_`(`_<String__STRING__String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(534) org.kframework.attributes.Location(Location(534,8,534,63)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("534"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(534,8,534,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKItem(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`while(_)__IMP-SYNTAX__BExp_Block`(B,S))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX__BExp_Block_Block`(B,`{_}_IMP-SYNTAX__Stmt`(`___IMP-SYNTAX__Stmt_Stmt`(inj{Block,Stmt}(S),`while(_)__IMP-SYNTAX__BExp_Block`(B,S))),`{}_IMP-SYNTAX_`(.KList)))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(103) org.kframework.attributes.Location(Location(103,8,103,53)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(VarB:SortBExp{},VarS:SortBlock{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(VarB:SortBExp{},Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(inj{SortBlock{}, SortStmt{}}(VarS:SortBlock{}),Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(VarB:SortBExp{},VarS:SortBlock{}))),Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}())),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("103"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(103,8,103,53)"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isKResult(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isBool(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBool{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `replaceAll(_,_,_)_STRING__String_String_String`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING__String_String_String_Int`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING__String_String`(Source,ToReplace)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(558) org.kframework.attributes.Location(Location(558,8,558,154)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{}),
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("558"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(558,8,558,154)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isString(inj{String,KItem}(String))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisString{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `set(_,_,_)_STATE-API__State_StateKey_StateValue`(`.State_STATE-API_`(.KList),K,V)=>`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(K,V),`.State_STATE-API_`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(22) org.kframework.attributes.Location(Location(22,8,22,65)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortState{},R} (
        Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(Lbl'Stop'State'Unds'STATE-API'Unds'{}(),VarK:SortStateKey{},VarV:SortStateValue{}),
        Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(VarK:SortStateKey{},VarV:SortStateValue{}),Lbl'Stop'State'Unds'STATE-API'Unds'{}())),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("22"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(22,8,22,65)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]

// rule isStateCellOpt(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCellOpt{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{BExp,KItem}(`!__IMP-SYNTAX__BExp`(B))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(B)~>`!HOLE_IMP-STRICT_`(.KList)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(48) org.kframework.attributes.Location(Location(48,8,48,31)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(VarB:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarB:SortBExp{}),kseq{}(Lbl'Bang'HOLE'Unds'IMP-STRICT'Unds'{}(),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("48"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(48,8,48,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isKItem(inj{TCellFragment,KItem}(TCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKResult(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBool:SortBool{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKResult{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKResult{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKResult:SortKResult{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKResult{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}()))))),
        \bottom{R}())))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{String,KItem}(String))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Int,KItem}(I1)~>`HOLE+__IMP-STRICT__AExp`(A2)~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(A2)~>`_+HOLE_IMP-STRICT__Int`(I1)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(56) org.kframework.attributes.Location(Location(56,8,56,51)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI1:SortInt{}),kseq{}(LblHOLE'PlusUndsUnds'IMP-STRICT'UndsUnds'AExp{}(VarA2:SortAExp{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarA2:SortAExp{}),kseq{}(Lbl'UndsPlus'HOLE'Unds'IMP-STRICT'UndsUnds'Int{}(VarI1:SortInt{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("56"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(56,8,56,51)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(C,B1,_11)=>B1 requires C ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(733) org.kframework.attributes.Location(Location(733,8,733,56)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        VarC:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortK{},R} (
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortK{}}(VarC:SortBool{},VarB1:SortK{},Var'Unds'11:SortK{}),
        VarB1:SortK{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("733"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(733,8,733,56)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isBExp(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBExp{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarAssignment:SortAssignment{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortAssignment{}, SortKItem{}}(VarAssignment:SortAssignment{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCell:SortKCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarState:SortState{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortState{}, SortKItem{}}(VarState:SortState{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCellOpt:SortStateCellOpt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarIOError:SortIOError{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarCell:SortCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateValue:SortStateValue{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStateValue{}, SortKItem{}}(VarStateValue:SortStateValue{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBlock:SortBlock{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStream:SortStream{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarAExp:SortAExp{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarId:SortId{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarMap:SortMap{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarList:SortList{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStmt:SortStmt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCell:SortTCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCellFragment:SortTCellFragment{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKResult:SortKResult{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBExp:SortBExp{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCell:SortStateCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateKey:SortStateKey{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStateKey{}, SortKItem{}}(VarStateKey:SortStateKey{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarSet:SortSet{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarPgm:SortPgm{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortPgm{}, SortKItem{}}(VarPgm:SortPgm{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarIds:SortIds{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCellOpt:SortKCellOpt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBool:SortBool{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarString:SortString{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKItem:SortKItem{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortKItem{}, SortKItem{}}(VarKItem:SortKItem{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarFloat:SortFloat{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}()))))),
        \bottom{R}())))))))))))))))))))))))))))))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{StateValue,KItem}(StateValue))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStateValue{}, SortKItem{}}(VarStateValue:SortStateValue{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStateCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCell:SortStateCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateCell{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{Float,KItem}(Float))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(`if'(_)_else__IMP-STRICT__Bool_Block_Block`(#token("false","Bool"),_24,S)~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Block,KItem}(S)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(102) org.kframework.attributes.Location(Location(102,8,102,33)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lblif'AposLParUndsRParUnds'else'UndsUnds'IMP-STRICT'UndsUnds'Bool'Unds'Block'Unds'Block{}(\dv{SortBool{}}("false"),Var'Unds'24:SortBlock{},VarS:SortBlock{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarS:SortBlock{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("102"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,8,102,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isStateKey(inj{StateKey,KItem}(StateKey))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateKey{}(kseq{}(inj{SortStateKey{}, SortKItem{}}(VarStateKey:SortStateKey{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_xorBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(296) org.kframework.attributes.Location(Location(296,8,296,38)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        VarB:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("296"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(296,8,296,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isCell(inj{Cell,KItem}(Cell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKConfigVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKConfigVar:SortKConfigVar{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKConfigVar{}(kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKConfigVar{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_orBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(303) org.kframework.attributes.Location(Location(303,8,303,32)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        VarB:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("303"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(303,8,303,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKItem(inj{State,KItem}(State))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortState{}, SortKItem{}}(VarState:SortState{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isAssignment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarAssignment:SortAssignment{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisAssignment{}(kseq{}(inj{SortAssignment{}, SortKItem{}}(VarAssignment:SortAssignment{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAssignment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(`!'__IMP-STRICT__Bool`(T)~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Bool,KItem}(`notBool_`(T))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(92) org.kframework.attributes.Location(Location(92,8,92,25)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(Lbl'BangAposUndsUnds'IMP-STRICT'UndsUnds'Bool{}(VarT:SortBool{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(LblnotBool'Unds'{}(VarT:SortBool{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("92"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(92,8,92,25)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isStmt(inj{Stmt,KItem}(Stmt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStmt{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `countAllOccurrences(_,_)_STRING__String_String`(Source,ToCount)=>`_+Int__INT__Int_Int`(#token("1","Int"),`countAllOccurrences(_,_)_STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),`lengthString(_)_STRING__String`(ToCount)),`lengthString(_)_STRING__String`(Source)),ToCount)) requires `_>=Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(543) org.kframework.attributes.Location(Location(543,8,544,60)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToCount:SortString{}),
        Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToCount:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})),VarToCount:SortString{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("543"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(543,8,544,60)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_=/=Bool__BOOL__Bool_Bool`(B1,B2)=>`notBool_`(`_==Bool__BOOL__Bool_Bool`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(315) org.kframework.attributes.Location(Location(315,8,315,57)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("315"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(315,8,315,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isStateValue(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateValue{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateValue:SortStateValue{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateValue{}(kseq{}(inj{SortStateValue{}, SortKItem{}}(VarStateValue:SortStateValue{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateValue{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `replace(_,_,_,_)_STRING__String_String_String_Int`(Source,ToReplace,Replacement,Count)=>`_+String__STRING__String_String`(`_+String__STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING__String_String_String_Int`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING__String`(ToReplace)),`lengthString(_)_STRING__String`(Source)),ToReplace,Replacement,`_-Int__INT__Int_Int`(Count,#token("1","Int")))) requires `_>Int__INT__Int_Int`(Count,#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(553) org.kframework.attributes.Location(Location(553,8,556,30)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarCount:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},VarCount:SortInt{}),
        Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})),VarToReplace:SortString{},VarReplacement:SortString{},Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarCount:SortInt{},\dv{SortInt{}}("1"))))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("553"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(553,8,556,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `inState(_,_)_STATE-API__State_StateKey`(`.State_STATE-API_`(.KList),_21)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(26) org.kframework.attributes.Location(Location(26,8,26,35)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblinState'LParUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey{}(Lbl'Stop'State'Unds'STATE-API'Unds'{}(),Var'Unds'21:SortStateKey{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("26"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(26,8,26,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/lib/state.k)")]

// rule `<T>`(`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX__BExp_BExp`(inj{Bool,BExp}(#token("false","Bool")),_25))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Bool,KItem}(#token("false","Bool"))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(94) org.kframework.attributes.Location(Location(94,8,94,27)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("false")),Var'Unds'25:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(\dv{SortBool{}}("false")),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("94"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(94,8,94,27)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isMap(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMap{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(282) org.kframework.attributes.Location(Location(282,8,282,29)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblnotBool'Unds'{}(\dv{SortBool{}}("true")),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("282"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(282,8,282,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_andBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(285) org.kframework.attributes.Location(Location(285,8,285,37)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("285"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(285,8,285,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `countAllOccurrences(_,_)_STRING__String_String`(Source,ToCount)=>#token("0","Int") requires `_<Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(541) org.kframework.attributes.Location(Location(541,8,542,59)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToCount:SortString{}),
        \dv{SortInt{}}("0")),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("541"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(541,8,542,59)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule `_=/=Int__INT__Int_Int`(I1,I2)=>`notBool_`(`_==Int__INT__Int_Int`(I1,I2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(391) org.kframework.attributes.Location(Location(391,8,391,53)) org.kframework.attributes.Source(Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("391"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(391,8,391,53)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/k/k-distribution/target/release/k/include/builtin/domains.k)")]

// rule isKResult(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isCell(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `set(_,_,_)_STATE-API__State_StateKey_StateValue`(`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(inj{Id,StateKey}(#token("sum","Id")),V),S),inj{Id,StateKey}(#token("n","Id")),V')=>`___STATE-API__Assignment_State`(`_|->__STATE-API__StateKey_StateValue`(inj{Id,StateKey}(#token("sum","Id")),V),`set(_,_,_)_STATE-API__State_StateKey_StateValue`(S,inj{Id,StateKey}(#token("n","Id")),V')) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(72) org.kframework.attributes.Location(Location(72,8,72,101)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortState{},R} (
        Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("sum")),VarV:SortStateValue{}),VarS:SortState{}),inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("n")),VarV'Apos':SortStateValue{}),
        Lbl'UndsUndsUnds'STATE-API'UndsUnds'Assignment'Unds'State{}(Lbl'UndsPipe'-'-GT-UndsUnds'STATE-API'UndsUnds'StateKey'Unds'StateValue{}(inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("sum")),VarV:SortStateValue{}),Lblset'LParUndsCommUndsCommUndsRParUnds'STATE-API'UndsUnds'State'Unds'StateKey'Unds'StateValue{}(VarS:SortState{},inj{SortId{}, SortStateKey{}}(\dv{SortId{}}("n")),VarV'Apos':SortStateValue{}))),
      \top{R}()))
  [contentStartColumn{}("8"), contentStartLine{}("72"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(72,8,72,101)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule `<T>`(`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX__BExp_BExp`(inj{Bool,BExp}(#token("true","Bool")),B))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(B)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(93) org.kframework.attributes.Location(Location(93,8,93,22)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("true")),VarB:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarB:SortBExp{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("93"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(93,8,93,22)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

// rule isBExp(inj{BExp,KItem}(BExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBExp{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{AExp,KItem}(`-__IMP-SYNTAX__Int`(I1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Int,KItem}(`_-Int__INT__Int_Int`(#token("0","Int"),I1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(89) org.kframework.attributes.Location(Location(89,8,89,25)) org.kframework.attributes.Source(Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(VarI1:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("0"),VarI1:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [contentStartColumn{}("8"), contentStartLine{}("89"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(89,8,89,25)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]

endmodule [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(75,1,114,9)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/d/traian/Documents/kore/src/main/k/imp-concrete-heat-cool/./imp.k)")]
