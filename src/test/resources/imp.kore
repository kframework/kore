[]

module IMP

  sort{} Bool{} []

  symbol true{}() : Bool{} []

  symbol false{}() : Bool{} []

  symbol and{}(Bool{}, Bool{}) : Bool{} []

  symbol not{}(Bool{}) : Bool{} []

  sort{} Int{} []

  symbol zero{}() : Int{} []

  symbol succ{}(Int{}) : Int{} []

  symbol plus{}(Int{}, Int{}) : Int{} []

  symbol div{}(Int{}, Int{}) : Int{} []

  symbol leq{}(Int{}, Int{}) : Bool{} []

  sort{} Id{} []

  symbol id{}(Int{}) : Id{} []

  sort{S} Set{S} []

  symbol emptySet{S}() : Set{S} []

  symbol union{S}(Set{S}, Set{S}) : Set{S} []

  symbol inSet{S}(S, Set{S}) : Bool{} []

  axiom{S,R}
    \equals{Set{S},R}(
      union{S}(S:Set{S}, emptySet{S}()),
      S:Set{S}) []

  sort{S1,S2} Map{S1,S2} []

  symbol bind{S1,S2}(S1,S2) : Map{S1,S2} []

  symbol emptyMap{S1,S2}() : Map{S1,S2} []

  symbol merge{S1,S2}(Map{S1,S2}, Map{S1,S2}) : Map{S1,S2} []

  symbol keys{S1,S2}(Map{S1,S2}) : Set{S1} []

  sort{S1,S2} Ctxt{S1,S2} []

  symbol gamma0{S1,S2}(S1, S2) : Ctxt{S1, S2} []

  symbol app{S1,S2}(Ctxt{S1,S2}, S1) : S2 []

  symbol #isCtxt{#R}(#Sort{}, #Pattern{}) : #R []

  symbol #gamma{}(#Sort{}, #Sort{}, #Variable{}, #Pattern{}) : #Pattern{} []

  axiom{S1,S2,#S}
    \equals{#Pattern{},#S}(
      #gamma{}(
        #S1:#Sort{},
        #S2:#Sort{},
        #X:#Variable{},
        #E:#Pattern{}),
      \exists{Ctxt{S1,S2}}(
        #X:#Variable{},
        gamma0{S1,S2}(
          #VariableToPattern{}(#X:#Variable{}),
          #E:#Pattern{}))) []

  axiom{#R}
    #isCtxt{#R}(
      #S:#Sort{},
      #VariableToPattern{}(#variable{}(#X:#String{}, #S:#Sort{}))) []

  axiom{#R1,#R2}
    \equals{#R1,#R2}(
      #isCtxt{#R1}(
        #S2:#Sort{},
        app{}(#C1:#Pattern{},#C2:#Pattern{})),
      \exists{#R1}(
        #S1:#Sort{},
        \and{#R1}(
          #isCtxt{#R1}(
            #Ctxt{}(#S1:#Sort{}, #S2:#Sort{}),
            #C1:#Pattern{}),
          #isCtxt{#R1}(
            #S1:#Sort{},
            #C2:#Pattern{})))) []

  axiom{#R1,#R2}
    \equals{#R1,#R2}(
      #isCtxt{#R1}(
        #Ctxt{}(#S1:#Sort{}, #S2:#Sort{}),
        #gamma{}(#variable{}(#X:#String{},#S:#Sort{}), #C:#Pattern{})),
      \and{#R1}(
        \equals{#Sort{},#R1}(
          #S:#Sort{},
          #S1:#Sort{}),
        #isCtxt{#R1}(
          #S2:#Sort{},
          #C:#Pattern{}))) []

  axiom{S1,S2,#R}
    \implies{#R}(
      #isCtxt{#R}(
        #S2:#Sort{},
        app{S1,S2}(
          #gamma{}(
            #S1:Sort{},
            #S2:Sort{},
            #X:#Variable{},
            #C1:#Pattern{}),
          #C2:#Pattern{})),
      \equals{#Pattern,#R}(
        app{S1,S2}(
          #gamma{}(
            #S1:Sort{},
            #S2:Sort{},
            #X:#Variable{},
            #C1:#Pattern{}),
          #C2:#Pattern{}),
        #substitute{}(
          #C1:#Pattern{},
          #C2:#Pattern{},
          #X:#Variable{}))) []

  sort{} AExp{} []

  symbol intAsAExp{}(Int{}) : AExp{} []

  symbol idAsAExp{}(Id{}) : AExp{} []

  symbol divAExp{}(AExp{}, AExp{}) : AExp{} []

  axiom{S,S1,S2,R}
    \equals{AExp{},R}(
      divAExp{}(
        app{S1,S2}(
          #C:#Pattern{},
          T:S1),
        P:AExp{}),
      app{S1,AExp{}}(
        #gamma{}(
          HOLE:S1,
          divAExp{}(
            app{S1,S2}(
              #C:#Pattern{},
              HOLE:S1),
            P:AExp{})),
        T:S1))



  axiom \equals(#context(\exists(HOLE:`???`,#gamma(div(#context(C:`???`,HOLE:`???`),A2:`???`))),A1:`???`),div(#context(C:`???`,A1:`???`),A2:`???`)) [strict(div(),1())]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(div(A1:`???`,#context(C:`???`,HOLE:`???`)))),A2:`???`),div(A1:`???`,#context(C:`???`,A2:`???`))) [strict(div(),2())]
  syntax AExp{} ::= plus(AExp{},AExp{}) [strict()]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(plus(#context(C:`???`,HOLE:`???`),A2:`???`))),A1:`???`),plus(#context(C:`???`,A1:`???`),A2:`???`)) [strict(plus(),1())]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(plus(A1:`???`,#context(C:`???`,HOLE:`???`)))),A2:`???`),plus(A1:`???`,#context(C:`???`,A2:`???`))) [strict(plus(),2())]
  syntax BExp []
  syntax BExp ::= boolAsBExp(Bool{}) []
  syntax BExp ::= leq(AExp{},AExp{}) [seqstrict()]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(leq(#context(C:`???`,HOLE:`???`),A2:`???`))),A1:`???`),leq(#context(C:`???`,A1:`???`),A2:`???`)) [seqstrict(leq(),1())]
  axiom \implies(\equals(isKResult(A1:`???`),\top()),\equals(#context(\exists(HOLE:`???`,#gamma(leq(A1:`???`,#context(C:`???`,HOLE:`???`)))),A2:`???`),leq(A1:`???`,#context(C:`???`,A2:`???`)))) [seqstrict(leq(),2())]
  syntax BExp ::= not(BExp) [strict()]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(not(#context(C:`???`,HOLE:`???`)))),B:`???`),not(#context(C:`???`,B:`???`))) [strict(not(),1())]
  syntax BExp ::= and(BExp,BExp) [strict(1())]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(and(#context(C:`???`,HOLE:`???`),B2:`???`))),B1:`???`),and(#context(C:`???`,B1:`???`),B2:`???`)) [strict(and(),1())]
  syntax Block []
  syntax Block ::= emptyBlock() []
  syntax Block ::= block(Stmt) []
  syntax Stmt []
  syntax Stmt ::= blockAsStmt(Block) []
  syntax Stmt ::= asgn(Id,AExp{}) [strict(2())]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(asgn(X:`???`,#context(C:`???`,HOLE:`???`)))),A:`???`),asgn(X:`???`,#context(C:`???`,A:`???`))) [strict(asgn(),2())]
  syntax Stmt ::= if(BExp,Block,Block) [strict(1())]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(if(#context(C:`???`,HOLE:`???`),S1:`???`,S2:`???`))),B:`???`),if(#context(C:`???`,B:`???`),S1:`???`,S2:`???`)) [strict(if(),1())]
  syntax Stmt ::= while(BExp,Block) []
  syntax Stmt ::= seq(Stmt,Stmt) [strict(1())]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(seq(#context(C:`???`,HOLE:`???`),S2:`???`))),S1:`???`),seq(#context(C:`???`,S1:`???`),S2:`???`)) [strict(seq(),1())]
  syntax Pgm []
  syntax Pgm ::= pgm(Ids,Stmt) []
  syntax Ids []
  syntax Ids ::= idAsIds(Id) [list()]
  syntax Ids ::= .Ids() [list()]
  syntax Ids ::= comma(Ids,Ids) [list()]
  axiom \equals(comma(.Ids(),Ids1:`???`),Ids1:`???`) [list()]
  axiom \equals(comma(Ids1:`???`,.Ids()),Ids1:`???`) [list()]
  axiom \equals(comma(comma(Ids1:`???`,Ids2:`???`),Ids3:`???`),comma(Ids1:`???`,comma(Ids2:`???`,Ids3:`???`))) [list()]
endmodule []

module IMP
  import IMP-SYNTAX []
  syntax KResult ::= intAsKResult(Int{}) []
  syntax KResult ::= boolAsKResult(Bool{}) []
  syntax TopCell [cfg()]
  syntax TopCell ::= top(KCell,StateCell) [cfg()]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(top(#context(C:`???`,HOLE:`???`),Sc:`???`))),Kc:`???`),top(#context(C:`???`,Kc:`???`),Sc:`???`)) [cfg(top(),1())]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(top(Kc:`???`,#context(C:`???`,HOLE:`???`)))),Sc:`???`),top(Kc:`???`,#context(C:`???`,Sc:`???`))) [cfg(top(),2())]
  syntax KCell [cfg()]
  syntax KCell ::= k(K) [cfg()]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(k(#context(C:`???`,HOLE:`???`)))),K1:`???`),k(#context(C:`???`,K1:`???`))) [cfg(k(),1())]
  syntax StateCell [cfg()]
  syntax StateCell ::= state(Map) [cfg()]
  axiom \equals(#context(\exists(HOLE:`???`,#gamma(state(#context(C:`???`,HOLE:`???`)))),M:`???`),state(#context(C:`???`,M:`???`))) [cfg(state(),1())]
  syntax TopCell ::= #krun(Pgm) []
  axiom \equals(#krun(P:`???`),top(k(P:`???`),state(.Map()))) []
  rule #...2(\rewrite(idAsAExp{}(X:`???`),intAsAExp{}(I:`???`)),bind(X:`???`,I:`???`)) []
  rule \implies(\not(\equals(I2:`???`,0())),#...(\rewrite(div(intAsAExp{}(I1:`???`),intAsAExp{}(I2:`???`)),intAsAExp{}(div@INT(I1:`???`,I2:`???`))))) []
  rule #...(\rewrite(plus(intAsAExp{}(I1:`???`),intAsAExp{}(I2:`???`)),intAsAExp{}(plus@INT(I1:`???`,I2:`???`)))) []
  rule #...(\rewrite(leq(intAsAExp{}(I1:`???`),intAsAExp{}(I2:`???`)),boolAsBExp(leq@INT(I1:`???`,I2:`???`)))) []
  rule #...(\rewrite(not(boolAsBExp(T:`???`)),boolAsBExp(not@BOOL(T:`???`)))) []
  rule #...(\rewrite(and(boolAsBExp(true()),B:`???`),B:`???`)) []
  rule #...(\rewrite(and(boolAsBExp(false()),_:`???`),boolAsBExp(false()))) []
  rule #...(\rewrite(blockAsStmt(block(S:`???`)),S:`???`)) []
  rule #...2(\rewrite(asgn(X:`???`,intAsAExp{}(I:`???`)),blockAsStmt(emptyBlock())),bind(X:`???`,\rewrite(_:`???`,I:`???`))) []
  rule #...(\rewrite(seq(blockAsStmt(emptyBlock()),S:`???`),S:`???`)) []
  rule #...(\rewrite(if(boolAsBExp(true()),S:`???`,_:`???`),blockAsStmt(S:`???`))) []
  rule #...(\rewrite(if(boolAsBExp(false()),_:`???`,S:`???`),blockAsStmt(S:`???`))) []
  rule #...(\rewrite(while(B:`???`,S:`???`),if(B:`???`,block(seq(blockAsStmt(S:`???`),while(B:`???`,S:`???`))),emptyBlock()))) []
  rule #...(pgm(\rewrite(comma(idAsIds(X:`???`),Xs:`???`),Xs:`???`),_:`???`),state(comma@MAP(\equals(\and(M:`???`,in(X:`???`,keys(M:`???`))),false()),\rewrite(.Map(),bind(X:`???`,0()))))) []
  rule #...(\rewrite(pgmAsK(pgm(.Ids(),S:Stmt)),stmtAsK(S:`???`))) []
endmodule []
