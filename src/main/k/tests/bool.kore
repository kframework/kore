module BOOL

  sort Bool{} []

  symbol true{}() : Bool{} []

  symbol false{}() : Bool{} []

  symbol andBool{}(Bool{}, Bool{}) : Bool{} []

  symbol notBool{}(Bool{}) : Bool{} []

  /* Functional symbol axioms (one for each funcional symbol). */

  /* exists t . true = t
   * exists t . false = t
   * forall x y . exists t . andBool(x,y) = t
   * forall x . exists t . notBool(x) = t
   */

  axiom{R}
    \exists{R}(
      T:Bool{},
      \equals{Bool{},R}(
        true{}(),
        T:Bool{}))
  []

  axiom{R}
    \exists{R}(
      T:Bool{},
      \equals{Bool{},R}(
        false{}(),
        T:Bool{}))
  []


  axiom{R}
    \forall{R}(
      X:Bool{},
      \forall{R}(
        Y:Bool{},
        \exists{R}(
          T:Bool{},
          \equals{Bool{},R}(
            andBool{}(X:Bool{},Y:Bool{}),
            T:Bool{}))))
  []

  axiom{R}
    \forall{R}(
      X:Bool{},
      \exists{R}(
        T:Bool{},
        \equals{Bool{},R}(
          notBool{}(X:Bool{}),
          T:Bool{})))
  []

  /* Constructor axioms (See Matching Logic paper, Seciton 5.7)
   * http://fsl.cs.illinois.edu/index.php/Matching_logic
   *
   * (No Junk) true \/ false  --- this is saying a boolean is either
   *                          --- true or false
   *                          --- Note: _\/_ is the disjunction in ML
   * (No Confusion) not (true /\ false)
   *                          --- this is saying a boolean cannot be
   *                          --- both a true and a false.
   *                          --- Note: _/\_ is the conjunction in ML.
   *                          ---       It is not "andBool".
   */

  axiom{}
    \or{Bool{}}(true{}(), false{}())
  []

  axiom{}
    \not{Bool{}}(\and{Bool{}}(true{}(), false{}()))
  []

  /* Usual axioms about boolean operations:
   * andBool(true,T) = T
   * andBool(false,T) = false
   * notBool(true) = false
   * notBool(false) = true
   */

  axiom{R}
    \equals{Bool{},R}(
      andBool{}(true{}(), T:Bool{}),
      T:Bool{})
  []

  axiom{R}
    \equals{Bool{},R}(
      andBool{}(false{}(), T:Bool{}),
      false{}())
  []

  axiom{R}
    \equals{Bool{},R}(
      notBool{}(true{}()), false{}())
  []

  axiom{R}
    \equals{Bool{},R}(
      notBool{}(false{}()), true{}())
  []


endmodule []

